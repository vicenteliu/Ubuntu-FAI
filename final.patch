diff --git a/.gitignore b/.gitignore
index 3a70f21..252e0e6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,55 @@
-venv
-venv_linux
-__pycache__
-.ruff_cache
-.pytest_cache
\ No newline at end of file
+# Python 虚拟环境
+ubuntu-fai-venv/
+venv/
+env/
+.venv/
+
+# Python 缓存文件
+__pycache__/
+*.py[cod]
+*$py.class
+*.so
+
+# 测试和代码检查缓存
+.pytest_cache/
+.ruff_cache/
+.coverage
+htmlcov/
+
+# 构建输出
+output/
+build/
+dist/
+*.egg-info/
+
+# 缓存目录
+cache/
+*.deb
+*.rpm
+
+# 日志文件
+logs/
+*.log
+
+# 临时文件
+.tmp/
+temp/
+*.tmp
+
+# IDE 配置
+.vscode/
+.idea/
+*.swp
+*.swo
+
+# 操作系统文件
+.DS_Store
+Thumbs.db
+
+# 配置文件 (可选，根据需要调整)
+config-*.json
+my-config.json
+
+# 备份文件
+*.bak
+*.backup
diff --git a/CONDA_SETUP.md b/CONDA_SETUP.md
deleted file mode 100644
index ae2c05e..0000000
--- a/CONDA_SETUP.md
+++ /dev/null
@@ -1,254 +0,0 @@
-# Ubuntu FAI Build System - Conda 环境设置指南
-
-本项目支持使用 conda 来管理 Python 运行环境，提供更好的依赖管理和环境隔离。
-
-## 📋 前提条件
-
-### 安装 Miniconda 或 Anaconda
-
-如果您还没有安装 conda，请选择其中一种方式：
-
-**选项 1: Miniconda (推荐，轻量级)**
-```bash
-# macOS
-curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
-bash Miniconda3-latest-MacOSX-x86_64.sh
-
-# Linux
-curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
-bash Miniconda3-latest-Linux-x86_64.sh
-```
-
-**选项 2: Anaconda (完整版)**
-- 访问 https://www.anaconda.com/download
-- 下载并安装适合您系统的版本
-
-## 🚀 快速开始
-
-### 1. 自动环境设置（推荐）
-
-使用我们提供的自动化脚本：
-
-```bash
-# 创建 conda 环境
-./setup-conda-env.sh
-
-# 检查环境状态
-./setup-conda-env.sh --check
-
-# 重新创建环境（如果需要）
-./setup-conda-env.sh --recreate
-
-# 更新环境
-./setup-conda-env.sh --update
-```
-
-### 2. 手动环境设置
-
-如果您喜欢手动控制：
-
-```bash
-# 创建环境
-conda env create -f environment.yml
-
-# 激活环境
-conda activate ubuntu-fai
-
-# 验证安装
-python -c "import pydantic, jinja2, yaml; print('所有包安装成功！')"
-```
-
-## 💻 开发工作流
-
-### 本地开发
-
-```bash
-# 激活环境
-conda activate ubuntu-fai
-
-# 运行构建（本地环境）
-./run-conda.sh --local config.json.example
-
-# 运行测试
-pytest tests/ -v
-
-# 代码格式化
-black src/ tests/
-isort src/ tests/
-
-# 类型检查
-mypy src/
-
-# 代码检查
-ruff check src/ tests/
-```
-
-### Docker 开发
-
-```bash
-# 构建 conda 版本的 Docker 镜像
-./run-conda.sh --build config.json.example
-
-# 运行构建（Docker 环境）
-./run-conda.sh config.json.example
-
-# 调试模式
-./run-conda.sh --debug config.json.example
-```
-
-## 🔧 环境管理
-
-### 添加新依赖
-
-1. 编辑 `environment.yml`：
-```yaml
-dependencies:
-  # 现有依赖...
-  - your-new-package=1.0.*
-```
-
-2. 更新环境：
-```bash
-./setup-conda-env.sh --update
-```
-
-### 环境文件结构
-
-```
-Ubuntu-FAI/
-├── environment.yml          # Conda 环境配置
-├── setup-conda-env.sh      # 环境设置脚本
-├── run-conda.sh            # Conda 版本运行脚本
-├── Dockerfile.conda        # Conda 版本 Docker 文件
-├── requirements.txt        # pip 依赖（保留兼容性）
-└── Dockerfile              # 标准 Docker 文件（原版）
-```
-
-## 🐳 Docker 使用
-
-### 构建镜像
-
-```bash
-# 使用 conda 版本构建
-docker build -f Dockerfile.conda -t ubuntu-fai-conda .
-
-# 或使用脚本
-./run-conda.sh --build config.json.example
-```
-
-### 运行容器
-
-```bash
-# 基本运行
-./run-conda.sh config.json.example
-
-# 自定义输出目录
-./run-conda.sh --output-dir /path/to/output config.json
-
-# 调试模式
-./run-conda.sh --debug config.json.example
-```
-
-## 🛠️ 故障排除
-
-### 常见问题
-
-**问题: conda 命令未找到**
-```bash
-# 解决方案: 初始化 conda
-conda init bash
-source ~/.bashrc
-```
-
-**问题: 环境创建失败**
-```bash
-# 解决方案: 清理并重试
-conda clean --all
-./setup-conda-env.sh --recreate
-```
-
-**问题: 包冲突**
-```bash
-# 解决方案: 检查环境文件
-conda env export -n ubuntu-fai
-# 根据输出调整 environment.yml
-```
-
-### 环境验证
-
-```bash
-# 检查环境
-conda info --envs
-
-# 检查包列表
-conda list -n ubuntu-fai
-
-# 验证关键功能
-conda run -n ubuntu-fai python -c "
-import sys
-print(f'Python: {sys.version}')
-import pydantic, jinja2, yaml, requests
-print('✓ 所有关键包可用')
-"
-```
-
-## 📊 性能优化
-
-### Conda 配置优化
-
-```bash
-# 添加 conda-forge 频道
-conda config --add channels conda-forge
-
-# 启用严格频道优先级
-conda config --set channel_priority strict
-
-# 启用 mamba 求解器（更快）
-conda install -n base conda-libmamba-solver
-conda config --set solver libmamba
-```
-
-### 构建缓存
-
-```bash
-# 使用构建缓存
-./run-conda.sh config.json  # 默认使用缓存
-
-# 强制重新构建
-./run-conda.sh --build --no-cache config.json
-```
-
-## 🔄 与现有工具的兼容性
-
-项目同时支持两种环境管理方式：
-
-1. **Conda 环境** (推荐)
-   - `environment.yml`
-   - `./run-conda.sh`
-   - `Dockerfile.conda`
-
-2. **传统 pip 环境** (兼容性)
-   - `requirements.txt`
-   - `./run.sh`
-   - `Dockerfile`
-
-您可以根据需要选择使用哪种方式，两者功能完全相同。
-
-## 🆘 获取帮助
-
-```bash
-# 查看设置脚本帮助
-./setup-conda-env.sh --help
-
-# 查看运行脚本帮助
-./run-conda.sh --help
-
-# 检查环境状态
-./setup-conda-env.sh --check
-```
-
-如果遇到问题，请检查：
-1. conda 是否正确安装
-2. 环境是否正确创建
-3. 所有依赖是否安装完成
-4. Docker 是否运行（如果使用 Docker 模式）
\ No newline at end of file
diff --git a/Dockerfile b/Dockerfile
deleted file mode 100644
index 208e04a..0000000
--- a/Dockerfile
+++ /dev/null
@@ -1,92 +0,0 @@
-# Ubuntu FAI Build System Docker Image
-# Multi-stage build for reproducible Ubuntu 24.04 ISO generation
-
-# Build stage - Install dependencies and setup environment
-FROM ubuntu:24.04@sha256:b359f1067efa76f37863778f7b6d0e8d911e3ee8efa807ad01fbf5dc1ef9006b AS builder
-
-# Avoid interactive prompts during package installation
-ENV DEBIAN_FRONTEND=noninteractive
-
-# Update package list and install core dependencies
-RUN apt-get update && apt-get install -y \
-    python3.12 \
-    python3.12-dev \
-    python3-pip \
-    python3.12-venv \
-    fai-server \
-    fai-client \
-    fai-cd \
-    debootstrap \
-    squashfs-tools \
-    isolinux \
-    syslinux \
-    genisoimage \
-    curl \
-    wget \
-    ca-certificates \
-    && rm -rf /var/lib/apt/lists/* \
-    && apt-get clean
-
-# Create Python symlink for consistency
-RUN ln -sf /usr/bin/python3.12 /usr/bin/python3 && \
-    ln -sf /usr/bin/python3.12 /usr/bin/python
-
-# Production stage - Minimal runtime environment
-FROM ubuntu:24.04@sha256:b359f1067efa76f37863778f7b6d0e8d911e3ee8efa807ad01fbf5dc1ef9006b AS production
-
-ENV DEBIAN_FRONTEND=noninteractive
-
-# Copy installed packages from builder stage
-COPY --from=builder /usr/bin/python* /usr/bin/
-COPY --from=builder /usr/lib/python3.12 /usr/lib/python3.12
-COPY --from=builder /usr/share/fai /usr/share/fai
-COPY --from=builder /usr/bin/fai-* /usr/bin/
-COPY --from=builder /usr/sbin/fai-* /usr/sbin/
-
-# Install only runtime dependencies in production stage
-RUN apt-get update && apt-get install -y \
-    python3-pip \
-    fai-server \
-    fai-client \
-    fai-cd \
-    debootstrap \
-    squashfs-tools \
-    isolinux \
-    syslinux \
-    genisoimage \
-    curl \
-    ca-certificates \
-    sudo \
-    && rm -rf /var/lib/apt/lists/* \
-    && apt-get clean
-
-# Create non-root user for security
-RUN groupadd --gid 1001 fai && \
-    useradd --uid 1001 --gid fai --shell /bin/bash --create-home fai && \
-    echo 'fai ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
-
-# Set working directory
-WORKDIR /app
-
-# Copy requirements first for better layer caching
-COPY requirements.txt .
-
-# Install Python dependencies as root, then switch to fai user
-RUN pip3 install --no-cache-dir --upgrade pip && \
-    pip3 install --no-cache-dir -r requirements.txt
-
-# Create necessary directories with proper permissions
-RUN mkdir -p /app/output /app/fai-config /tmp/fai-build && \
-    chown -R fai:fai /app /tmp/fai-build
-
-# Switch to non-root user for security
-USER fai
-
-# Copy application code
-COPY --chown=fai:fai . .
-
-# Expose volume mount points
-VOLUME ["/app/output", "/app/config"]
-
-# Default command
-CMD ["python3", "build.py", "--help"]
\ No newline at end of file
diff --git a/Dockerfile.conda b/Dockerfile.conda
deleted file mode 100644
index f115f5e..0000000
--- a/Dockerfile.conda
+++ /dev/null
@@ -1,116 +0,0 @@
-# Ubuntu FAI Build System Docker Image with Conda
-# 使用 conda 管理 Python 环境的多阶段构建
-
-# 基础阶段 - 安装系统依赖和 Miniconda
-FROM ubuntu:24.04@sha256:b359f1067efa76f37863778f7b6d0e8d911e3ee8efa807ad01fbf5dc1ef9006b AS base
-
-# 避免交互式安装提示
-ENV DEBIAN_FRONTEND=noninteractive
-
-# 更新包列表并安装核心系统依赖
-RUN apt-get update && \
-    # 安装通用依赖
-    apt-get install -y \
-        curl \
-        wget \
-        ca-certificates \
-        sudo \
-        debootstrap \
-        squashfs-tools \
-        genisoimage \
-    && \
-    # 尝试安装 FAI 相关包 (可能在某些架构上不可用)
-    (apt-get install -y \
-        fai-server \
-        fai-client \
-        fai-cd \
-        isolinux \
-        syslinux \
-    || echo "某些 FAI 包在此架构上不可用，跳过安装") && \
-    rm -rf /var/lib/apt/lists/* && \
-    apt-get clean
-
-# 安装 Miniforge (避免 conda ToS 问题)
-ENV CONDA_DIR=/opt/conda
-ENV PATH=$CONDA_DIR/bin:$PATH
-
-RUN ARCH=$(uname -m) && \
-    if [ "$ARCH" = "x86_64" ]; then \
-        MINIFORGE_ARCH="x86_64"; \
-    elif [ "$ARCH" = "aarch64" ]; then \
-        MINIFORGE_ARCH="aarch64"; \
-    else \
-        echo "不支持的架构: $ARCH" && exit 1; \
-    fi && \
-    wget --quiet https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-${MINIFORGE_ARCH}.sh -O /tmp/miniforge.sh && \
-    /bin/bash /tmp/miniforge.sh -b -p $CONDA_DIR && \
-    rm /tmp/miniforge.sh && \
-    $CONDA_DIR/bin/conda clean --all --yes && \
-    ln -s $CONDA_DIR/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
-    echo ". $CONDA_DIR/etc/profile.d/conda.sh" >> ~/.bashrc && \
-    echo "conda activate base" >> ~/.bashrc
-
-# 配置 conda (Miniforge 默认使用 conda-forge)
-RUN conda config --set always_yes yes --set changeps1 no && \
-    conda update -q conda
-
-# 创建非 root 用户
-RUN groupadd --gid 1001 fai && \
-    useradd --uid 1001 --gid fai --shell /bin/bash --create-home fai && \
-    echo 'fai ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
-    chown -R fai:fai $CONDA_DIR
-
-# 切换到 fai 用户
-USER fai
-WORKDIR /home/fai
-
-# 确保 conda 在用户环境中可用
-RUN echo ". $CONDA_DIR/etc/profile.d/conda.sh" >> ~/.bashrc && \
-    echo "conda activate ubuntu-fai" >> ~/.bashrc
-
-# 应用程序构建阶段
-FROM base AS builder
-
-# 复制环境配置文件
-COPY --chown=fai:fai environment.yml /tmp/environment.yml
-
-# 创建 conda 环境 (仅使用 conda-forge)
-RUN conda env create -f /tmp/environment.yml
-
-# 验证环境创建成功
-RUN conda activate ubuntu-fai && python --version && pip list
-
-# 生产阶段
-FROM base AS production
-
-# 从构建阶段复制 conda 环境
-COPY --from=builder --chown=fai:fai $CONDA_DIR $CONDA_DIR
-
-# 设置工作目录
-WORKDIR /app
-
-# 创建必要的目录
-RUN mkdir -p /app/output /app/fai-config /tmp/fai-build && \
-    sudo chown -R fai:fai /app /tmp/fai-build
-
-# 复制应用程序代码
-COPY --chown=fai:fai . .
-
-# 设置环境变量
-ENV CONDA_DEFAULT_ENV=ubuntu-fai
-ENV CONDA_PREFIX=$CONDA_DIR/envs/ubuntu-fai
-ENV PATH=$CONDA_PREFIX/bin:$CONDA_DIR/bin:$PATH
-
-# 暴露卷挂载点
-VOLUME ["/app/output", "/app/config"]
-
-# 创建环境激活脚本
-RUN echo '#!/bin/bash' > /app/activate-env.sh && \
-    echo 'source $CONDA_DIR/etc/profile.d/conda.sh' >> /app/activate-env.sh && \
-    echo 'conda activate ubuntu-fai' >> /app/activate-env.sh && \
-    echo 'exec "$@"' >> /app/activate-env.sh && \
-    chmod +x /app/activate-env.sh
-
-# 默认命令使用 conda 环境
-ENTRYPOINT ["/app/activate-env.sh"]
-CMD ["python", "build.py", "--help"]
\ No newline at end of file
diff --git a/README.md b/README.md
index 4ec4b45..10d90e6 100644
--- a/README.md
+++ b/README.md
@@ -2,30 +2,37 @@
 
 🚀 **自动化 Ubuntu 24.04 Desktop ISO 构建系统**
 
-使用 FAI (Fully Automatic Installation) 和 conda 环境管理的现代化 Ubuntu 定制 ISO 构建工具。
+使用 FAI (Fully Automatic Installation) 和 Python 虚拟环境的现代化 Ubuntu 定制 ISO 构建工具。
 
 ## 🌟 特性
 
-- **🐍 Conda 环境管理**: 使用 conda 管理 Python 依赖，支持本地和 Docker 两种运行模式
+- **🐍 Python 虚拟环境**: 使用 Python venv 管理依赖，确保环境隔离和可重现性
 - **⚙️ 智能配置验证**: 基于 Pydantic v2 的强类型配置验证和错误检查
 - **🎨 模板化生成**: 使用 Jinja2 模板生成 autoinstall 和 FAI 配置
 - **🔒 加密支持**: 内置 LUKS 磁盘加密配置，支持多种加密算法
 - **🖥️ 硬件适配**: 支持 Dell、Lenovo、HP 等主流硬件厂商的专用配置
 - **📦 软件包管理**: 支持 APT、Snap、DEB 包的自动安装
 - **🔧 首次启动脚本**: 自动化首次启动配置和软件安装
-- **📋 详细日志**: 完整的构建过程日志记录和错误追踪
+- **📊 增强日志系统**: 多级别日志记录，支持控制台、文件和 JSON 格式输出
+- **⏱️ 构建时间追踪**: 详细的阶段计时和性能分析
 
 ## 🛠️ 系统要求
 
 ### 必需依赖
-- **Python 3.11+**
-- **Conda/Miniconda** (推荐使用 Miniforge)
-- **Docker** (可选，用于容器化构建)
+- **Ubuntu 24.04 LTS** (推荐)
+- **Python 3.9+** 
+- **python3-venv** (虚拟环境模块)
+- **FAI** (用于 ISO 构建，可选)
 
-### 平台支持
-- ✅ macOS (ARM64/Intel)
-- ✅ Linux (x86_64/ARM64)
-- ⚠️ Windows (通过 WSL2)
+### 系统包安装
+```bash
+# Ubuntu/Debian
+sudo apt update
+sudo apt install python3 python3-venv python3-pip git
+
+# FAI 工具 (用于实际 ISO 构建)
+sudo apt install fai-server fai-setup-storage
+```
 
 ## 🚀 快速开始
 
@@ -35,335 +42,255 @@ git clone <repository-url>
 cd Ubuntu-FAI
 ```
 
-### 2. 设置 Conda 环境
+### 2. 设置 Python 虚拟环境
 ```bash
-./setup-conda-env.sh
+./setup-venv.sh
 ```
 
-### 3. 验证安装
+### 3. 激活虚拟环境
 ```bash
-./run-conda.sh --local --skip-fai config.json.example
+# 方法 1: 手动激活
+source ubuntu-fai-venv/bin/activate
+
+# 方法 2: 使用便捷脚本
+./activate-venv.sh
 ```
 
-### 4. 创建自定义配置
+### 4. 验证安装
+```bash
+./run.sh --skip-fai config.json.example
+```
+
+### 5. 创建自定义配置
 ```bash
 cp config.json.example my-config.json
-# 编辑 my-config.json 以满足您的需求
+# 编辑 my-config.json 根据需要自定义配置
 ```
 
-### 5. 构建 ISO (生成配置文件)
+## 📋 使用方法
+
+### 基本构建命令
 ```bash
-./run-conda.sh --local --skip-fai my-config.json
+# 完整构建 (生成配置 + 构建 ISO)
+./run.sh my-config.json
+
+# 仅生成配置文件
+./run.sh --skip-fai my-config.json
+
+# 跳过下载 (用于测试)
+./run.sh --skip-downloads --skip-fai my-config.json
+
+# 调试模式
+./run.sh --debug --skip-fai my-config.json
 ```
 
+### 命令行选项
+- `--skip-downloads`: 跳过资源下载阶段
+- `--skip-fai`: 跳过 FAI ISO 构建阶段
+- `--debug`: 启用调试模式，显示详细日志
+- `--help`: 显示帮助信息
+
 ## 📁 项目结构
 
 ```
 Ubuntu-FAI/
-├── build.py                    # 主构建脚本
-├── run-conda.sh               # Conda 环境运行脚本
-├── setup-conda-env.sh         # Conda 环境设置脚本
-├── environment.yml            # Conda 环境定义
-├── config.json.example        # 配置文件示例
-├── config-working.json        # 测试配置文件
-│
-├── src/                       # 源代码目录
-│   ├── config/               # 配置管理
-│   │   ├── models.py         # Pydantic 数据模型
-│   │   └── validator.py      # 配置验证器
-│   ├── generators/           # 配置生成器
-│   │   ├── autoinstall.py    # Ubuntu autoinstall 生成
-│   │   ├── fai_config.py     # FAI 配置生成
-│   │   └── first_boot.py     # 首次启动脚本生成
-│   ├── downloaders/          # 下载管理器
-│   │   ├── packages.py       # 软件包下载
-│   │   └── scripts.py        # 脚本下载
-│   └── templates/            # Jinja2 模板
-│       ├── user-data.yaml.j2 # Autoinstall 模板
-│       └── user-data-simple.yaml.j2 # 简化模板
-│
-├── fai_config_base/          # FAI 基础配置
-├── first_boot_scripts/       # 首次启动脚本
-├── output/                   # 生成的配置文件
-├── cache/                    # 下载缓存
-└── logs/                     # 构建日志
+├── 📄 README.md                   # 项目文档
+├── 📄 TESTING.md                  # 测试指南
+├── 🔧 setup-venv.sh               # 虚拟环境设置脚本
+├── 🔧 activate-venv.sh            # 虚拟环境激活脚本
+├── 🔧 run.sh                      # 主运行脚本
+├── 🐍 build.py                    # 构建主程序
+├── 📄 requirements.txt            # Python 依赖
+├── ⚙️ config.json.example         # 配置示例
+├── 📂 src/                        # 源代码
+│   ├── 📂 config/                 # 配置管理
+│   ├── 📂 generators/             # 配置生成器
+│   ├── 📂 downloaders/            # 资源下载器
+│   ├── 📂 templates/              # Jinja2 模板
+│   └── 📂 utils/                  # 工具模块
+├── 📂 fai_config_base/           # FAI 基础配置
+├── 📂 output/                     # 构建输出
+├── 📂 logs/                       # 日志文件
+└── 📂 tests/                      # 测试套件
 ```
 
 ## ⚙️ 配置文件格式
 
+配置文件使用 JSON 格式，包含以下主要部分：
+
+### 硬件配置
 ```json
 {
   "hardware": {
-    "vendor": "dell",           // 硬件厂商: dell, lenovo, hp, generic
-    "target_ssd": true,         // 是否针对 SSD 优化
-    "disk_size_min_gb": null    // 最小磁盘大小 (GB)
-  },
-  "encryption": {
-    "enabled": true,            // 是否启用 LUKS 加密
-    "passphrase": "your-secure-passphrase",
-    "cipher": "aes-xts-plain64", // 加密算法
-    "key_size": 256             // 密钥长度
-  },
-  "packages": {
-    "apt_packages": ["git", "curl", "vim"],  // APT 软件包
-    "deb_urls": [],                          // DEB 包下载链接
-    "snap_packages": ["code"]                // Snap 软件包
-  },
-  "user": {
-    "username": "ubuntu",       // 用户名
-    "full_name": "Ubuntu User", // 全名
-    "password": "password",     // 密码
-    "ssh_authorized_keys": [],  // SSH 公钥
-    "sudo_nopasswd": false      // 是否免密 sudo
-  },
-  "first_boot": {
-    "enabled": true,            // 是否启用首次启动脚本
-    "scripts": []               // 首次启动脚本列表
-  },
-  "network": {
-    "dhcp": true,               // 是否使用 DHCP
-    "hostname": "ubuntu-desktop" // 主机名
+    "vendor": "dell",
+    "target_ssd": true,
+    "disk_size_min_gb": null
   }
 }
 ```
 
-## 🔧 使用方法
-
-### 本地 Conda 环境 (推荐)
-```bash
-# 仅生成配置文件 (跳过 FAI 构建)
-./run-conda.sh --local --skip-fai config.json
-
-# 包含下载但跳过 FAI 构建
-./run-conda.sh --local --skip-fai config.json
-
-# 跳过下载和 FAI 构建 (使用缓存)
-./run-conda.sh --local --skip-downloads --skip-fai config.json
-
-# 启用调试模式
-./run-conda.sh --local --debug --skip-fai config.json
+### 加密配置
+```json
+{
+  "encryption": {
+    "enabled": true,
+    "passphrase": "MySecureP@ssw0rd123!",
+    "cipher": "aes-xts-plain64",
+    "key_size": 256
+  }
+}
 ```
 
-### Docker 环境
-```bash
-# 构建 Docker 镜像
-./run-conda.sh --build config.json
-
-# 使用现有镜像运行
-./run-conda.sh config.json
-
-# 强制重建镜像
-./run-conda.sh --build --no-cache config.json
+### 软件包配置
+```json
+{
+  "packages": {
+    "apt_packages": ["curl", "wget", "git", "vim"],
+    "deb_urls": [
+      "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
+    ],
+    "snap_packages": ["discord", "slack"]
+  }
+}
 ```
 
-### 命令行参数
-```bash
-用法: ./run-conda.sh [选项] <config.json> [构建参数...]
-
-选项:
-  -h, --help              显示帮助信息
-  -b, --build             强制重新构建 Docker 镜像
-  -c, --clean             清理容器和镜像
-  -d, --debug             启用调试模式
-  --no-cache              构建镜像时不使用缓存
-  --output-dir DIR        指定输出目录 (默认: ./output)
-  --local                 使用本地 conda 环境
-
-构建参数:
-  --skip-downloads        跳过资产下载
-  --skip-fai              跳过 FAI 构建过程
-  --cache-dir DIR         缓存目录路径
-  --debug                 启用调试日志
+### 用户配置
+```json
+{
+  "user": {
+    "username": "ubuntu",
+    "full_name": "System Administrator",
+    "password": "SecureUserP@ss123!",
+    "ssh_authorized_keys": [
+      "ssh-ed25519 AAAAC3... admin@workstation"
+    ],
+    "sudo_nopasswd": false
+  }
+}
 ```
 
 ## 📊 日志系统
 
-系统提供全面的多级别、多格式日志记录：
+系统提供多级别的日志记录：
 
 ### 日志级别
-- **DEBUG**: 详细的调试信息 (包括构建阶段时间)
-- **INFO**: 一般信息和进度 (构建状态、配置验证)
-- **WARNING**: 警告信息 (配置警告、性能提示)
-- **ERROR**: 错误信息 (构建失败、验证错误)
+- **DEBUG**: 详细的调试信息
+- **INFO**: 一般信息和进度
+- **WARNING**: 警告信息
+- **ERROR**: 错误信息
 
 ### 日志输出格式
-- **控制台日志**: 彩色格式，实时显示构建进程
-- **文件日志**: 详细格式，包含时间戳、模块、函数信息
-- **JSON 日志**: 机器可读格式，便于分析和监控
-- **错误日志**: 单独的错误和警告日志文件
+- **控制台**: 彩色格式化输出
+- **文件**: 标准格式，保存到 `logs/build.log`
+- **JSON**: 结构化格式，保存到 `logs/build.json`
 
-### 日志文件位置
-```
-logs/
-├── build.log              # 主构建日志 (详细信息)
-├── error.log             # 错误和警告日志
-├── build.json            # JSON 格式日志 (机器可读)
-└── session_YYYYMMDD_HHMMSS.json  # 会话摘要
-```
+### 阶段计时
+系统会记录每个构建阶段的耗时：
+- 配置验证
+- 资源下载
+- Autoinstall 生成
+- FAI 配置生成
+- 首次启动配置生成
 
-### 构建阶段追踪
-系统自动记录各个构建阶段的执行时间：
-- **配置验证** (config_validation)
-- **资产下载** (asset_download)  
-- **Autoinstall 生成** (autoinstall_generation)
-- **FAI 配置生成** (fai_generation)
-- **首次启动配置** (first_boot_generation)
-- **FAI 构建** (fai_build)
+## 🧪 测试
 
-### 查看日志
+### 运行测试套件
 ```bash
-# 查看最新构建日志 (彩色输出)
-tail -f logs/build.log
-
-# 查看错误日志
-cat logs/error.log
+# 激活虚拟环境
+source ubuntu-fai-venv/bin/activate
 
-# 查看 JSON 格式日志
-jq '.' logs/build.json
+# 运行所有测试
+pytest
 
-# 启用详细调试模式
-./run-conda.sh --local --debug --skip-fai config.json
-
-# 监控构建进度 (实时)
-./run-conda.sh --local --skip-fai config.json | grep "阶段"
+# 运行特定测试
+pytest tests/config/
+pytest tests/generators/
 ```
 
-### 日志分析示例
+### 配置验证测试
 ```bash
-# 分析构建时间
-grep "耗时" logs/build.log
-
-# 查看配置验证结果
-grep "配置验证" logs/build.log
-
-# 检查模板生成状态
-grep "模板生成" logs/build.log
-
-# 分析 JSON 日志中的构建阶段
-jq '.build_phase' logs/build.json | sort | uniq -c
+# 测试配置验证
+python -c "
+from src.config.models import BuildConfig
+config = BuildConfig.from_file('config.json.example')
+print('配置验证通过!')
+"
 ```
 
-## 🎯 输出文件
-
-构建完成后，输出目录包含：
-
-```
-output/
-├── user-data.yaml              # Ubuntu autoinstall 配置
-├── fai-config/                 # FAI 配置空间
-│   ├── class/                  # FAI 类脚本
-│   ├── disk_config/            # 磁盘配置
-│   ├── package_config/         # 软件包配置
-│   └── scripts/                # 安装脚本
-└── first-boot/                 # 首次启动配置
-    ├── first-boot.service      # Systemd 服务
-    ├── first-boot.sh           # 启动脚本
-    └── scripts/                # 自定义脚本
-```
-
-## 🛠️ 故障排除
+## 🔧 故障排除
 
 ### 常见问题
 
-#### 1. Conda 环境创建失败
+#### 1. Python 版本不兼容
 ```bash
-# 删除现有环境并重新创建
-conda env remove -n ubuntu-fai
-./setup-conda-env.sh
+python3 --version  # 确认版本 >= 3.9
 ```
 
-#### 2. 配置验证错误
+#### 2. 虚拟环境创建失败
 ```bash
-# 检查配置文件格式
-python -m json.tool config.json
+# 安装 venv 模块
+sudo apt install python3-venv
 
-# 查看详细验证错误
-./run-conda.sh --local --debug --skip-fai config.json
+# 重新创建环境
+rm -rf ubuntu-fai-venv
+./setup-venv.sh
 ```
 
-#### 3. 权限问题
+#### 3. 依赖安装失败
 ```bash
-# 确保脚本有执行权限
-chmod +x run-conda.sh setup-conda-env.sh
+# 升级 pip
+source ubuntu-fai-venv/bin/activate
+python -m pip install --upgrade pip
 
-# 检查输出目录权限
-ls -la output/
+# 重新安装依赖
+pip install -r requirements.txt
 ```
 
-#### 4. Docker 构建失败 (ARM64)
-```bash
-# 在 Apple Silicon Mac 上优先使用本地模式
-./run-conda.sh --local --skip-fai config.json
+#### 4. 配置验证错误
+- 检查 JSON 语法是否正确
+- 确认必需字段是否存在
+- 查看日志文件获取详细错误信息
 
-# 如果需要 Docker，确保 Docker Desktop 支持 ARM64
-docker buildx ls
+#### 5. 资源下载失败
+```bash
+# 跳过下载进行测试
+./run.sh --skip-downloads --skip-fai config.json.example
 ```
 
-### 调试技巧
-
-1. **启用详细日志**:
-   ```bash
-   ./run-conda.sh --local --debug --skip-fai config.json
-   ```
-
-2. **检查生成的配置**:
-   ```bash
-   # 验证 YAML 语法
-   python -c "import yaml; yaml.safe_load(open('output/user-data.yaml'))"
-   ```
-
-3. **测试配置验证**:
-   ```bash
-   # 单独测试配置加载
-   conda run -n ubuntu-fai python -c "
-   from src.config.models import BuildConfig
-   import json
-   with open('config.json') as f:
-       config = BuildConfig(**json.load(f))
-   print('配置验证成功')
-   "
-   ```
-
-## 🤝 贡献指南
-
-1. Fork 项目
-2. 创建功能分支 (`git checkout -b feature/amazing-feature`)
-3. 提交更改 (`git commit -m 'Add amazing feature'`)
-4. 推送到分支 (`git push origin feature/amazing-feature`)
-5. 创建 Pull Request
-
-### 开发环境设置
+### 获取详细日志
 ```bash
-# 克隆项目
-git clone <repository-url>
-cd Ubuntu-FAI
+# 启用调试模式
+./run.sh --debug --skip-fai config.json.example
+
+# 查看日志文件
+tail -f logs/build.log
+```
 
-# 设置开发环境
-./setup-conda-env.sh
+## 📚 详细文档
 
-# 运行测试
-conda run -n ubuntu-fai python -m pytest tests/
+- [测试指南](TESTING.md) - 完整的测试说明
+- [项目规划](CLAUDE.md) - 开发指南和架构说明
 
-# 代码格式化
-conda run -n ubuntu-fai black src/
-```
+## 🤝 贡献
 
-## 📄 许可证
+欢迎提交 Issue 和 Pull Request！请确保：
 
-本项目采用 MIT 许可证 - 查看 [LICENSE](LICENSE) 文件了解详情。
+1. 代码通过所有测试
+2. 遵循 PEP8 代码风格
+3. 添加适当的文档和注释
+4. 更新相关的测试用例
 
-## 🆘 支持
+## 📄 许可证
 
-- **GitHub Issues**: [报告问题](../../issues)
-- **讨论区**: [社区讨论](../../discussions)
-- **文档**: [详细文档](docs/)
+本项目采用 MIT 许可证 - 详见 [LICENSE](LICENSE) 文件。
 
-## 🔗 相关资源
+## 🔗 相关链接
 
-- [FAI 官方文档](https://fai-project.org/)
-- [Ubuntu Autoinstall](https://ubuntu.com/server/docs/install/autoinstall)
-- [Conda 用户指南](https://docs.conda.io/en/latest/)
+- [FAI Project](http://fai-project.org/) - Fully Automatic Installation
+- [Ubuntu Autoinstall](https://ubuntu.com/server/docs/install/autoinstall) - Ubuntu 自动安装文档
+- [Pydantic](https://pydantic-docs.helpmanual.io/) - 数据验证库
+- [Jinja2](https://jinja.palletsprojects.com/) - 模板引擎
 
 ---
 
-**⭐ 如果这个项目对您有帮助，请给它一个星标！**
\ No newline at end of file
+🎯 **目标**: 简化 Ubuntu 定制 ISO 的创建过程，提供可重现的企业级部署解决方案。
\ No newline at end of file
diff --git a/TESTING.md b/TESTING.md
new file mode 100644
index 0000000..10f47f5
--- /dev/null
+++ b/TESTING.md
@@ -0,0 +1,432 @@
+# Ubuntu FAI Build System - 测试指南
+
+🧪 **Ubuntu 24.04 原生环境测试完整指南**
+
+本文档提供在 Ubuntu 24.04 主机上测试 Ubuntu FAI Build System 的详细说明和验证步骤。
+
+## 📋 目录
+
+- [测试环境要求](#测试环境要求)
+- [环境准备](#环境准备)
+- [基础功能测试](#基础功能测试)
+- [详细功能测试](#详细功能测试)
+- [错误场景测试](#错误场景测试)
+- [性能测试](#性能测试)
+- [高级测试场景](#高级测试场景)
+- [测试检查清单](#测试检查清单)
+- [故障排除](#故障排除)
+
+## 🖥️ 测试环境要求
+
+### 推荐系统配置
+- **操作系统**: Ubuntu 24.04 LTS (x86_64 或 ARM64)
+- **内存**: 最少 4GB RAM，推荐 8GB+
+- **存储**: 最少 10GB 可用空间
+- **网络**: 互联网连接（用于下载依赖和软件包）
+
+### 必需软件
+- Python 3.9+
+- python3-venv (虚拟环境模块)
+- python3-pip
+- git
+
+### 可选软件 (用于完整 ISO 构建)
+- FAI tools (fai-server, fai-setup-storage)
+- 虚拟化工具 (qemu-kvm, libvirt)
+
+## 🚀 环境准备
+
+### 1. 系统更新和依赖安装
+```bash
+# 更新系统
+sudo apt update && sudo apt upgrade -y
+
+# 安装基础依赖
+sudo apt install -y python3 python3-venv python3-pip git curl wget
+
+# 安装 FAI 工具 (可选)
+sudo apt install -y fai-server fai-setup-storage
+
+# 验证 Python 版本
+python3 --version  # 应该 >= 3.9
+```
+
+### 2. 克隆项目
+```bash
+git clone <repository-url>
+cd Ubuntu-FAI
+
+# 检查项目文件完整性
+ls -la
+```
+
+### 3. 设置虚拟环境
+```bash
+# 运行环境设置脚本
+./setup-venv.sh
+
+# 验证虚拟环境创建
+ls -la ubuntu-fai-venv/
+```
+
+## 🧪 基础功能测试
+
+### 测试 1: 虚拟环境验证
+```bash
+# 激活虚拟环境
+source ubuntu-fai-venv/bin/activate
+
+# 验证 Python 解释器
+which python
+python --version
+
+# 验证关键依赖
+python -c "import pydantic, jinja2, yaml, requests; print('所有依赖正常')"
+
+# 退出虚拟环境
+deactivate
+```
+
+**预期结果**: 
+- 虚拟环境成功激活
+- Python 解释器指向虚拟环境
+- 所有依赖包导入成功
+
+### 测试 2: 配置验证测试
+```bash
+# 使用新脚本进行测试
+./run.sh --help
+
+# 基础配置验证
+./run.sh --skip-downloads --skip-fai config.json.example
+```
+
+**预期结果**:
+- 帮助信息正确显示
+- 配置验证通过，无致命错误
+- 生成 autoinstall 和 FAI 配置文件
+
+### 测试 3: 日志系统验证
+```bash
+# 启用调试模式测试
+./run.sh --debug --skip-downloads --skip-fai config.json.example
+
+# 检查日志文件
+ls -la logs/
+cat logs/build.log
+cat logs/build.json | head -5
+```
+
+**预期结果**:
+- 控制台显示彩色调试输出
+- 生成完整的日志文件
+- JSON 日志格式正确
+
+## 🔍 详细功能测试
+
+### 测试 4: 配置文件生成验证
+```bash
+# 运行完整配置生成
+./run.sh --skip-downloads --skip-fai config.json.example
+
+# 验证输出文件
+echo "=== Autoinstall 配置 ==="
+head -20 output/user-data.yaml
+
+echo "=== FAI 配置 ==="
+ls -la output/fai-config/
+
+echo "=== 首次启动配置 ==="
+ls -la output/first-boot/
+```
+
+**预期结果**:
+- 生成有效的 user-data.yaml 文件
+- FAI 配置目录结构完整
+- 首次启动脚本和服务文件存在
+
+### 测试 5: 不同配置场景测试
+```bash
+# 创建自定义配置进行测试
+cp config.json.example test-config.json
+
+# 修改配置 (可选)
+# 编辑 test-config.json 更改硬件类型、加密设置等
+
+# 测试自定义配置
+./run.sh --skip-downloads --skip-fai test-config.json
+
+# 比较输出差异
+diff output/user-data.yaml output.backup/user-data.yaml || echo "配置已更新"
+```
+
+**预期结果**:
+- 不同配置生成不同的输出文件
+- 配置变更反映在生成的文件中
+
+### 测试 6: 模板渲染验证
+```bash
+# 检查模板文件
+echo "=== 用户数据模板 ==="
+grep -A 5 -B 5 "{% if" src/templates/user-data.yaml.j2
+
+echo "=== 首次启动模板 ==="
+grep -A 3 -B 3 "packages" src/templates/first-boot-script.sh.j2
+
+# 验证模板语法
+python -c "
+from jinja2 import Environment, FileSystemLoader
+env = Environment(loader=FileSystemLoader('src/templates'))
+templates = ['user-data.yaml.j2', 'first-boot.service.j2']
+for t in templates:
+    template = env.get_template(t)
+    print(f'模板 {t} 语法正确')
+"
+```
+
+**预期结果**:
+- 模板文件包含正确的 Jinja2 语法
+- 所有模板语法验证通过
+
+## ❌ 错误场景测试
+
+### 测试 7: 配置验证错误处理
+```bash
+# 创建无效配置文件
+echo '{"invalid": "json"' > invalid-config.json
+
+# 测试无效 JSON
+./run.sh --skip-fai invalid-config.json 2>&1 | grep -i error
+
+# 创建缺少必需字段的配置
+echo '{"hardware": {"vendor": "dell"}}' > incomplete-config.json
+
+# 测试不完整配置
+./run.sh --skip-fai incomplete-config.json 2>&1 | grep -i error
+
+# 清理测试文件
+rm -f invalid-config.json incomplete-config.json
+```
+
+**预期结果**:
+- 无效 JSON 被正确检测和报告
+- 缺少必需字段的错误被捕获
+- 错误信息清晰明了
+
+### 测试 8: 网络错误处理
+```bash
+# 测试下载错误处理 (使用示例配置中的无效 URL)
+./run.sh --skip-fai config.json.example 2>&1 | grep -A 5 -B 5 "404"
+
+# 验证系统优雅处理下载失败
+echo "检查日志中的错误处理..."
+grep -i "download.*failed" logs/build.log || echo "未发现下载错误"
+```
+
+**预期结果**:
+- 网络错误被正确捕获和报告
+- 系统不会因下载失败而崩溃
+- 错误日志提供有用的诊断信息
+
+## ⚡ 性能测试
+
+### 测试 9: 构建时间分析
+```bash
+# 运行性能测试
+echo "开始性能测试..."
+time ./run.sh --skip-downloads --skip-fai config.json.example
+
+# 分析阶段耗时
+echo "=== 构建阶段耗时分析 ==="
+grep "阶段.*完成.*耗时" logs/build.log
+
+# 检查日志文件大小
+echo "=== 日志文件大小 ==="
+ls -lh logs/
+```
+
+**预期结果**:
+- 完整构建在合理时间内完成 (< 30 秒用于配置生成)
+- 各阶段耗时记录清晰
+- 日志文件大小合理 (< 1MB)
+
+### 测试 10: 内存使用监控
+```bash
+# 监控内存使用
+echo "监控构建过程内存使用..."
+
+# 后台运行构建
+./run.sh --skip-downloads --skip-fai config.json.example &
+BUILD_PID=$!
+
+# 监控内存使用
+while kill -0 $BUILD_PID 2>/dev/null; do
+    ps -o pid,vsz,rss,comm -p $BUILD_PID
+    sleep 1
+done
+
+echo "构建完成，内存监控结束"
+```
+
+**预期结果**:
+- 内存使用稳定，无明显内存泄漏
+- 峰值内存使用 < 500MB
+
+## 🚀 高级测试场景
+
+### 测试 11: 并发安全测试
+```bash
+# 创建多个配置文件
+cp config.json.example config-test1.json
+cp config.json.example config-test2.json
+cp config.json.example config-test3.json
+
+# 并发运行多个构建
+echo "开始并发测试..."
+./run.sh --skip-downloads --skip-fai config-test1.json &
+./run.sh --skip-downloads --skip-fai config-test2.json &
+./run.sh --skip-downloads --skip-fai config-test3.json &
+
+# 等待所有任务完成
+wait
+
+echo "并发测试完成"
+rm -f config-test*.json
+```
+
+**预期结果**:
+- 所有并发构建成功完成
+- 无文件冲突或竞争条件
+- 日志文件正确分离
+
+## ✅ 测试检查清单
+
+### 基础功能检查
+- [ ] 虚拟环境正确创建和激活
+- [ ] 所有 Python 依赖正确安装
+- [ ] 配置文件验证正常工作
+- [ ] 帮助信息正确显示
+
+### 配置生成检查
+- [ ] Autoinstall 配置 (user-data.yaml) 生成正确
+- [ ] FAI 配置文件结构完整
+- [ ] 首次启动脚本生成正确
+- [ ] 模板渲染无语法错误
+
+### 日志系统检查
+- [ ] 控制台输出彩色格式正确
+- [ ] 文件日志格式标准
+- [ ] JSON 日志结构正确
+- [ ] 构建阶段计时准确
+
+### 错误处理检查
+- [ ] 无效配置被正确拒绝
+- [ ] 网络错误优雅处理
+- [ ] 文件权限错误正确报告
+- [ ] 错误信息清晰有用
+
+### 性能检查
+- [ ] 构建时间在合理范围内
+- [ ] 内存使用稳定
+- [ ] 临时文件正确清理
+- [ ] 并发执行无冲突
+
+## 🔧 故障排除
+
+### 常见问题及解决方法
+
+#### 1. 虚拟环境创建失败
+```bash
+# 检查 Python 版本
+python3 --version
+
+# 安装 venv 模块
+sudo apt install python3-venv
+
+# 删除并重新创建
+rm -rf ubuntu-fai-venv
+./setup-venv.sh
+```
+
+#### 2. 依赖安装失败
+```bash
+# 激活虚拟环境
+source ubuntu-fai-venv/bin/activate
+
+# 升级 pip
+python -m pip install --upgrade pip
+
+# 重新安装依赖
+pip install -r requirements.txt
+```
+
+#### 3. 配置验证错误
+```bash
+# 检查配置文件语法
+python -m json.tool config.json.example
+
+# 手动运行配置验证
+python -c "
+from src.config.models import BuildConfig
+try:
+    config = BuildConfig.from_file('config.json.example')
+    print('配置验证通过')
+except Exception as e:
+    print(f'配置错误: {e}')
+"
+```
+
+#### 4. 权限问题
+```bash
+# 检查文件权限
+ls -la setup-venv.sh run.sh
+
+# 修复执行权限
+chmod +x setup-venv.sh run.sh activate-venv.sh
+
+# 检查输出目录权限
+ls -la output/
+```
+
+#### 5. 日志分析
+```bash
+# 查看最新日志
+tail -f logs/build.log
+
+# 搜索错误信息
+grep -i error logs/build.log
+
+# 查看 JSON 日志
+jq '.level, .message' logs/build.json | tail -20
+```
+
+## 📊 测试报告模板
+
+```
+# Ubuntu FAI Build System 测试报告
+
+## 测试环境
+- 操作系统: Ubuntu 24.04 LTS
+- Python 版本: 3.x.x
+- 测试日期: YYYY-MM-DD
+- 测试人员: [姓名]
+
+## 测试结果汇总
+- 总测试项目: 11
+- 通过项目: X
+- 失败项目: X
+- 跳过项目: X
+
+## 详细结果
+[详细记录每个测试的结果]
+
+## 发现的问题
+[记录任何问题和建议的解决方案]
+
+## 建议
+[改进建议和后续行动项]
+```
+
+---
+
+🎯 **测试目标**: 确保 Ubuntu FAI Build System 在 Ubuntu 24.04 环境中稳定可靠地运行，所有核心功能正常工作。
\ No newline at end of file
diff --git a/config.json.example b/config.json.example
index 8e83537..b9600ac 100644
--- a/config.json.example
+++ b/config.json.example
@@ -26,7 +26,7 @@
       "serpent-xts-plain64",
       "twofish-xts-plain64"
     ],
-    "key_size": 512,
+    "key_size": 256,
     "_key_size_options": [256, 512],
     "_key_size_note": "Use 256 for Dell hardware compatibility"
   },
@@ -66,7 +66,7 @@
   
   "user": {
     "_comment": "Primary user account configuration",
-    "username": "admin",
+    "username": "ubuntu",
     "_username_requirements": "Lowercase alphanumeric with dashes/underscores, max 32 chars",
     "full_name": "System Administrator",
     "password": "SecureUserP@ss123!",
diff --git a/environment.yml b/environment.yml
deleted file mode 100644
index 359bfa0..0000000
--- a/environment.yml
+++ /dev/null
@@ -1,56 +0,0 @@
-# Ubuntu FAI Build System - Conda Environment Configuration
-# 使用 conda 管理 Python 依赖和环境
-
-name: ubuntu-fai
-channels:
-  - conda-forge
-
-dependencies:
-  # Python 核心版本 - 使用3.11以获得更好的兼容性
-  - python=3.11
-
-  # 核心运行时依赖
-  - pydantic>=2.5,<3.0
-  - jinja2>=3.1,<4.0
-  - pyyaml>=6.0,<7.0
-  - requests>=2.31,<3.0
-  - click>=8.1,<9.0
-  - typing-extensions>=4.9,<5.0
-
-  # 开发和验证工具
-  - pytest>=7.4,<8.0
-  - pytest-cov>=4.1,<5.0
-  - pytest-mock>=3.12,<4.0
-
-  # 代码质量工具
-  - black>=23.0,<25.0
-  - mypy>=1.8,<2.0
-  - isort>=5.13,<6.0
-
-  # 安全检查工具
-  - bandit>=1.7,<2.0
-
-  # 文档生成（可选）
-  - sphinx>=7.2,<8.0
-
-  # 构建和打包工具
-  - wheel>=0.42,<1.0
-
-  # 通过 pip 安装的依赖（conda 中不可用的包）
-  - pip
-  - pip:
-    # 使用pip安装一些在conda中有兼容性问题的包
-    - ruff>=0.1.0,<1.0
-    - safety>=3.0,<4.0
-    - sphinx-rtd-theme>=2.0,<3.0
-    - pytest-asyncio>=0.23,<1.0
-    - build>=1.0,<2.0
-
-# 开发环境变量
-variables:
-  PYTHONPATH: $CONDA_PREFIX/src
-  FAI_PROJECT_ROOT: $CONDA_PREFIX
-  PYTHONUNBUFFERED: "1"
-
-# 环境激活后运行的命令
-# 注意：这些在 conda env create 时不会运行，需要在激活后手动运行或通过脚本
\ No newline at end of file
diff --git a/logs/build.json b/logs/build.json
index d1fa882..4573f44 100644
--- a/logs/build.json
+++ b/logs/build.json
@@ -36,3 +36,117 @@
 {"timestamp": "2025-07-18T20:43:24.756987", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
 {"timestamp": "2025-07-18T20:43:24.757039", "level": "INFO", "logger": "ubuntu-fai.build", "message": "构建成功完成 - 耗时: 0.08s", "module": "logger", "function": "log_build_end", "line": 184, "build_phase": "end", "duration": 0.08273696899414062}
 {"timestamp": "2025-07-18T20:43:24.757085", "level": "INFO", "logger": "ubuntu-fai.main", "message": "Configuration files generated in: output", "module": "build", "function": "main", "line": 511}
+{"timestamp": "2025-07-18T21:07:53.484104", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_build_start", "line": 175, "build_phase": "start", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:07:53.484872", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: config_validation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "config_validation"}
+{"timestamp": "2025-07-18T21:07:53.484943", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "build", "function": "load_and_validate_config", "line": 71}
+{"timestamp": "2025-07-18T21:07:53.486120", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "阶段 config_validation 失败 - 耗时: 0.00s", "module": "logger", "function": "log_phase_end", "line": 212, "build_phase": "config_validation", "duration": 0.0010972023010253906}
+{"timestamp": "2025-07-18T21:07:53.486284", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Failed to load configuration: 1 validation error for BuildConfig\n  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error", "module": "build", "function": "load_and_validate_config", "line": 117}
+{"timestamp": "2025-07-18T21:07:53.486389", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Build failed: 1 validation error for BuildConfig\n  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error", "module": "build", "function": "build", "line": 417}
+{"timestamp": "2025-07-18T21:07:53.486428", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
+{"timestamp": "2025-07-18T21:07:53.486493", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "构建失败 - 耗时: 0.00s", "module": "logger", "function": "log_build_end", "line": 186, "build_phase": "end", "duration": 0.002596139907836914}
+{"timestamp": "2025-07-18T21:07:53.486594", "level": "ERROR", "logger": "ubuntu-fai.main", "message": "Build failed: 1 validation error for BuildConfig\n  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error", "module": "build", "function": "main", "line": 528}
+{"timestamp": "2025-07-18T21:08:27.186328", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_build_start", "line": 175, "build_phase": "start", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:08:27.187395", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: config_validation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "config_validation"}
+{"timestamp": "2025-07-18T21:08:27.187465", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "build", "function": "load_and_validate_config", "line": 71}
+{"timestamp": "2025-07-18T21:08:27.188550", "level": "ERROR", "logger": "ubuntu-fai.config", "message": "配置验证失败: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_config_validation", "line": 225, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:08:27.188626", "level": "ERROR", "logger": "ubuntu-fai.config", "message": "配置错误: Reserved username not allowed: admin", "module": "logger", "function": "log_config_validation", "line": 228, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:08:27.188702", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "阶段 config_validation 失败 - 耗时: 0.00s", "module": "logger", "function": "log_phase_end", "line": 212, "build_phase": "config_validation", "duration": 0.0013189315795898438}
+{"timestamp": "2025-07-18T21:08:27.188775", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Failed to load configuration: Configuration validation failed: ['Reserved username not allowed: admin']", "module": "build", "function": "load_and_validate_config", "line": 117}
+{"timestamp": "2025-07-18T21:08:27.188848", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Build failed: Configuration validation failed: ['Reserved username not allowed: admin']", "module": "build", "function": "build", "line": 417}
+{"timestamp": "2025-07-18T21:08:27.188891", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
+{"timestamp": "2025-07-18T21:08:27.188950", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "构建失败 - 耗时: 0.00s", "module": "logger", "function": "log_build_end", "line": 186, "build_phase": "end", "duration": 0.0028629302978515625}
+{"timestamp": "2025-07-18T21:08:27.189000", "level": "ERROR", "logger": "ubuntu-fai.main", "message": "Build failed: Configuration validation failed: ['Reserved username not allowed: admin']", "module": "build", "function": "main", "line": 528}
+{"timestamp": "2025-07-18T21:08:47.153043", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_build_start", "line": 175, "build_phase": "start", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:08:47.154048", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: config_validation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "config_validation"}
+{"timestamp": "2025-07-18T21:08:47.154134", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "build", "function": "load_and_validate_config", "line": 71}
+{"timestamp": "2025-07-18T21:08:47.154843", "level": "INFO", "logger": "ubuntu-fai.config", "message": "配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_config_validation", "line": 220, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:08:47.154927", "level": "WARNING", "logger": "ubuntu-fai.config", "message": "配置警告: Consider using key size 512 for stronger encryption", "module": "logger", "function": "log_config_validation", "line": 223, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:08:47.154999", "level": "WARNING", "logger": "ubuntu-fai.builder", "message": "Configuration warning: Consider using key size 512 for stronger encryption", "module": "build", "function": "load_and_validate_config", "line": 99}
+{"timestamp": "2025-07-18T21:08:47.155061", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 config_validation 完成 - 耗时: 0.00s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "config_validation", "duration": 0.0010578632354736328}
+{"timestamp": "2025-07-18T21:08:47.155111", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Configuration loaded and validated successfully", "module": "build", "function": "load_and_validate_config", "line": 108}
+{"timestamp": "2025-07-18T21:08:47.155159", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: asset_download", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "asset_download"}
+{"timestamp": "2025-07-18T21:08:47.155201", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Downloading required assets...", "module": "build", "function": "download_assets", "line": 130}
+{"timestamp": "2025-07-18T21:08:47.156344", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Downloading 2 packages...", "module": "build", "function": "download_assets", "line": 138}
+{"timestamp": "2025-07-18T21:08:59.819941", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Downloading 3 scripts...", "module": "build", "function": "download_assets", "line": 146}
+{"timestamp": "2025-07-18T21:09:00.112293", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "阶段 asset_download 失败 - 耗时: 12.96s", "module": "logger", "function": "log_phase_end", "line": 212, "build_phase": "asset_download", "duration": 12.956858158111572}
+{"timestamp": "2025-07-18T21:09:00.112991", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Asset download failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh", "module": "build", "function": "download_assets", "line": 162}
+{"timestamp": "2025-07-18T21:09:00.113172", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh", "module": "build", "function": "build", "line": 417}
+{"timestamp": "2025-07-18T21:09:00.113286", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
+{"timestamp": "2025-07-18T21:09:00.113540", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "构建失败 - 耗时: 12.96s", "module": "logger", "function": "log_build_end", "line": 186, "build_phase": "end", "duration": 12.960405111312866}
+{"timestamp": "2025-07-18T21:09:00.113699", "level": "ERROR", "logger": "ubuntu-fai.main", "message": "Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh", "module": "build", "function": "main", "line": 528}
+{"timestamp": "2025-07-18T21:09:10.994720", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_build_start", "line": 175, "build_phase": "start", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:09:10.995437", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: config_validation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "config_validation"}
+{"timestamp": "2025-07-18T21:09:10.995503", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "build", "function": "load_and_validate_config", "line": 71}
+{"timestamp": "2025-07-18T21:09:10.996192", "level": "INFO", "logger": "ubuntu-fai.config", "message": "配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_config_validation", "line": 220, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:09:10.996289", "level": "WARNING", "logger": "ubuntu-fai.config", "message": "配置警告: Consider using key size 512 for stronger encryption", "module": "logger", "function": "log_config_validation", "line": 223, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:09:10.996357", "level": "WARNING", "logger": "ubuntu-fai.builder", "message": "Configuration warning: Consider using key size 512 for stronger encryption", "module": "build", "function": "load_and_validate_config", "line": 99}
+{"timestamp": "2025-07-18T21:09:10.996426", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 config_validation 完成 - 耗时: 0.00s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "config_validation", "duration": 0.0009889602661132812}
+{"timestamp": "2025-07-18T21:09:10.996471", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Configuration loaded and validated successfully", "module": "build", "function": "load_and_validate_config", "line": 108}
+{"timestamp": "2025-07-18T21:09:10.996515", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Skipping asset downloads as requested", "module": "build", "function": "build", "line": 379}
+{"timestamp": "2025-07-18T21:09:10.996553", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: autoinstall_generation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "autoinstall_generation"}
+{"timestamp": "2025-07-18T21:09:10.996592", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Generating autoinstall configuration...", "module": "build", "function": "generate_autoinstall_config", "line": 176}
+{"timestamp": "2025-07-18T21:09:11.002506", "level": "INFO", "logger": "ubuntu-fai.template", "message": "模板生成成功: user-data.yaml.j2 -> output/user-data.yaml", "module": "logger", "function": "log_template_generation", "line": 249, "build_phase": "template"}
+{"timestamp": "2025-07-18T21:09:11.002577", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 autoinstall_generation 完成 - 耗时: 0.01s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "autoinstall_generation", "duration": 0.0058917999267578125}
+{"timestamp": "2025-07-18T21:09:11.002622", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Autoinstall configuration generated: output/user-data.yaml", "module": "build", "function": "generate_autoinstall_config", "line": 191}
+{"timestamp": "2025-07-18T21:09:11.002676", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: fai_generation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "fai_generation"}
+{"timestamp": "2025-07-18T21:09:11.002712", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Generating FAI configuration...", "module": "build", "function": "generate_fai_config", "line": 217}
+{"timestamp": "2025-07-18T21:09:11.083866", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 fai_generation 完成 - 耗时: 0.08s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "fai_generation", "duration": 0.08112311363220215}
+{"timestamp": "2025-07-18T21:09:11.083939", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "FAI configuration generated: output/fai-config", "module": "build", "function": "generate_fai_config", "line": 229}
+{"timestamp": "2025-07-18T21:09:11.083986", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: first_boot_generation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "first_boot_generation"}
+{"timestamp": "2025-07-18T21:09:11.084025", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Generating first-boot configuration...", "module": "build", "function": "generate_first_boot_config", "line": 252}
+{"timestamp": "2025-07-18T21:09:11.090848", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "阶段 first_boot_generation 失败 - 耗时: 0.01s", "module": "logger", "function": "log_phase_end", "line": 212, "build_phase": "first_boot_generation", "duration": 0.006781816482543945}
+{"timestamp": "2025-07-18T21:09:11.090926", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "First-boot configuration generation failed: 'FirstBootScript' object has no attribute 'name'", "module": "build", "function": "generate_first_boot_config", "line": 273}
+{"timestamp": "2025-07-18T21:09:11.090980", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Build failed: 'FirstBootScript' object has no attribute 'name'", "module": "build", "function": "build", "line": 417}
+{"timestamp": "2025-07-18T21:09:11.091017", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
+{"timestamp": "2025-07-18T21:09:11.091067", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "构建失败 - 耗时: 0.10s", "module": "logger", "function": "log_build_end", "line": 186, "build_phase": "end", "duration": 0.09645700454711914}
+{"timestamp": "2025-07-18T21:09:11.091117", "level": "ERROR", "logger": "ubuntu-fai.main", "message": "Build failed: 'FirstBootScript' object has no attribute 'name'", "module": "build", "function": "main", "line": 528}
+{"timestamp": "2025-07-18T21:11:34.976781", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_build_start", "line": 175, "build_phase": "start", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:11:34.977666", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: config_validation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "config_validation"}
+{"timestamp": "2025-07-18T21:11:34.977736", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "build", "function": "load_and_validate_config", "line": 71}
+{"timestamp": "2025-07-18T21:11:34.978510", "level": "INFO", "logger": "ubuntu-fai.config", "message": "配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_config_validation", "line": 220, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:11:34.978643", "level": "WARNING", "logger": "ubuntu-fai.config", "message": "配置警告: Consider using key size 512 for stronger encryption", "module": "logger", "function": "log_config_validation", "line": 223, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:11:34.978725", "level": "WARNING", "logger": "ubuntu-fai.builder", "message": "Configuration warning: Consider using key size 512 for stronger encryption", "module": "build", "function": "load_and_validate_config", "line": 99}
+{"timestamp": "2025-07-18T21:11:34.978785", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 config_validation 完成 - 耗时: 0.00s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "config_validation", "duration": 0.0011568069458007812}
+{"timestamp": "2025-07-18T21:11:34.978834", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Configuration loaded and validated successfully", "module": "build", "function": "load_and_validate_config", "line": 108}
+{"timestamp": "2025-07-18T21:11:34.978886", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: asset_download", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "asset_download"}
+{"timestamp": "2025-07-18T21:11:34.978927", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Downloading required assets...", "module": "build", "function": "download_assets", "line": 130}
+{"timestamp": "2025-07-18T21:11:34.979370", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Downloading 2 packages...", "module": "build", "function": "download_assets", "line": 138}
+{"timestamp": "2025-07-18T21:11:34.979552", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Downloading 3 scripts...", "module": "build", "function": "download_assets", "line": 146}
+{"timestamp": "2025-07-18T21:11:35.172008", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "阶段 asset_download 失败 - 耗时: 0.19s", "module": "logger", "function": "log_phase_end", "line": 212, "build_phase": "asset_download", "duration": 0.1930098533630371}
+{"timestamp": "2025-07-18T21:11:35.172101", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Asset download failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh", "module": "build", "function": "download_assets", "line": 162}
+{"timestamp": "2025-07-18T21:11:35.172159", "level": "ERROR", "logger": "ubuntu-fai.builder", "message": "Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh", "module": "build", "function": "build", "line": 417}
+{"timestamp": "2025-07-18T21:11:35.172194", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
+{"timestamp": "2025-07-18T21:11:35.172246", "level": "ERROR", "logger": "ubuntu-fai.build", "message": "构建失败 - 耗时: 0.20s", "module": "logger", "function": "log_build_end", "line": 186, "build_phase": "end", "duration": 0.1957690715789795}
+{"timestamp": "2025-07-18T21:11:35.172296", "level": "ERROR", "logger": "ubuntu-fai.main", "message": "Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh", "module": "build", "function": "main", "line": 528}
+{"timestamp": "2025-07-18T21:11:48.061034", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_build_start", "line": 175, "build_phase": "start", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:11:48.061784", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: config_validation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "config_validation"}
+{"timestamp": "2025-07-18T21:11:48.061860", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "build", "function": "load_and_validate_config", "line": 71}
+{"timestamp": "2025-07-18T21:11:48.063003", "level": "INFO", "logger": "ubuntu-fai.config", "message": "配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example", "module": "logger", "function": "log_config_validation", "line": 220, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:11:48.063210", "level": "WARNING", "logger": "ubuntu-fai.config", "message": "配置警告: Consider using key size 512 for stronger encryption", "module": "logger", "function": "log_config_validation", "line": 223, "build_phase": "validation", "config_file": "/Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example"}
+{"timestamp": "2025-07-18T21:11:48.063277", "level": "WARNING", "logger": "ubuntu-fai.builder", "message": "Configuration warning: Consider using key size 512 for stronger encryption", "module": "build", "function": "load_and_validate_config", "line": 99}
+{"timestamp": "2025-07-18T21:11:48.063340", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 config_validation 完成 - 耗时: 0.00s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "config_validation", "duration": 0.0015680789947509766}
+{"timestamp": "2025-07-18T21:11:48.063387", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Configuration loaded and validated successfully", "module": "build", "function": "load_and_validate_config", "line": 108}
+{"timestamp": "2025-07-18T21:11:48.063434", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Skipping asset downloads as requested", "module": "build", "function": "build", "line": 379}
+{"timestamp": "2025-07-18T21:11:48.063471", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: autoinstall_generation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "autoinstall_generation"}
+{"timestamp": "2025-07-18T21:11:48.063504", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Generating autoinstall configuration...", "module": "build", "function": "generate_autoinstall_config", "line": 176}
+{"timestamp": "2025-07-18T21:11:48.070819", "level": "INFO", "logger": "ubuntu-fai.template", "message": "模板生成成功: user-data.yaml.j2 -> output/user-data.yaml", "module": "logger", "function": "log_template_generation", "line": 249, "build_phase": "template"}
+{"timestamp": "2025-07-18T21:11:48.070886", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 autoinstall_generation 完成 - 耗时: 0.01s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "autoinstall_generation", "duration": 0.007290840148925781}
+{"timestamp": "2025-07-18T21:11:48.070932", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Autoinstall configuration generated: output/user-data.yaml", "module": "build", "function": "generate_autoinstall_config", "line": 191}
+{"timestamp": "2025-07-18T21:11:48.070969", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: fai_generation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "fai_generation"}
+{"timestamp": "2025-07-18T21:11:48.071005", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Generating FAI configuration...", "module": "build", "function": "generate_fai_config", "line": 217}
+{"timestamp": "2025-07-18T21:11:48.149045", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 fai_generation 完成 - 耗时: 0.08s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "fai_generation", "duration": 0.07800912857055664}
+{"timestamp": "2025-07-18T21:11:48.149120", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "FAI configuration generated: output/fai-config", "module": "build", "function": "generate_fai_config", "line": 229}
+{"timestamp": "2025-07-18T21:11:48.149171", "level": "INFO", "logger": "ubuntu-fai.build", "message": "开始阶段: first_boot_generation", "module": "logger", "function": "log_phase_start", "line": 194, "build_phase": "first_boot_generation"}
+{"timestamp": "2025-07-18T21:11:48.149216", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Generating first-boot configuration...", "module": "build", "function": "generate_first_boot_config", "line": 252}
+{"timestamp": "2025-07-18T21:11:48.155643", "level": "INFO", "logger": "ubuntu-fai.build", "message": "阶段 first_boot_generation 完成 - 耗时: 0.01s", "module": "logger", "function": "log_phase_end", "line": 210, "build_phase": "first_boot_generation", "duration": 0.00640106201171875}
+{"timestamp": "2025-07-18T21:11:48.155722", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "First-boot configuration generated: output/first-boot", "module": "build", "function": "generate_first_boot_config", "line": 264}
+{"timestamp": "2025-07-18T21:11:48.155763", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Skipping FAI build as requested", "module": "build", "function": "build", "line": 402}
+{"timestamp": "2025-07-18T21:11:48.155801", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Configuration generation completed in 0.09s", "module": "build", "function": "build", "line": 407}
+{"timestamp": "2025-07-18T21:11:48.155834", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Phase timings:", "module": "build", "function": "build", "line": 409}
+{"timestamp": "2025-07-18T21:11:48.155866", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "  config_validation: 0.00s", "module": "build", "function": "build", "line": 411}
+{"timestamp": "2025-07-18T21:11:48.155897", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "  autoinstall_generation: 0.01s", "module": "build", "function": "build", "line": 411}
+{"timestamp": "2025-07-18T21:11:48.155928", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "  fai_generation: 0.08s", "module": "build", "function": "build", "line": 411}
+{"timestamp": "2025-07-18T21:11:48.155956", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "  first_boot_generation: 0.01s", "module": "build", "function": "build", "line": 411}
+{"timestamp": "2025-07-18T21:11:48.155986", "level": "INFO", "logger": "ubuntu-fai.builder", "message": "Cleaning up temporary files...", "module": "build", "function": "cleanup_temp_files", "line": 355}
+{"timestamp": "2025-07-18T21:11:48.156031", "level": "INFO", "logger": "ubuntu-fai.build", "message": "构建成功完成 - 耗时: 0.10s", "module": "logger", "function": "log_build_end", "line": 184, "build_phase": "end", "duration": 0.09529304504394531}
+{"timestamp": "2025-07-18T21:11:48.156076", "level": "INFO", "logger": "ubuntu-fai.main", "message": "Configuration files generated in: output", "module": "build", "function": "main", "line": 511}
diff --git a/logs/build.log b/logs/build.log
index b622062..571419c 100644
--- a/logs/build.log
+++ b/logs/build.log
@@ -36,3 +36,123 @@
 2025-07-18 13:43:24,756 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
 2025-07-18 13:43:24,757 - ubuntu-fai.build - INFO - logger:log_build_end:184 - 构建成功完成 - 耗时: 0.08s
 2025-07-18 13:43:24,757 - ubuntu-fai.main - INFO - build:main:511 - Configuration files generated in: output
+2025-07-18 14:07:53,483 - ubuntu-fai.build - INFO - logger:log_build_start:175 - 开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:07:53,484 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: config_validation
+2025-07-18 14:07:53,484 - ubuntu-fai.builder - INFO - build:load_and_validate_config:71 - Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:07:53,485 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 config_validation 失败 - 耗时: 0.00s
+2025-07-18 14:07:53,486 - ubuntu-fai.builder - ERROR - build:load_and_validate_config:117 - Failed to load configuration: 1 validation error for BuildConfig
+  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]
+    For further information visit https://errors.pydantic.dev/2.9/v/value_error
+2025-07-18 14:07:53,486 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 1 validation error for BuildConfig
+  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]
+    For further information visit https://errors.pydantic.dev/2.9/v/value_error
+2025-07-18 14:07:53,486 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
+2025-07-18 14:07:53,486 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.00s
+2025-07-18 14:07:53,486 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 1 validation error for BuildConfig
+  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]
+    For further information visit https://errors.pydantic.dev/2.9/v/value_error
+2025-07-18 14:08:27,186 - ubuntu-fai.build - INFO - logger:log_build_start:175 - 开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:27,187 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: config_validation
+2025-07-18 14:08:27,187 - ubuntu-fai.builder - INFO - build:load_and_validate_config:71 - Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:27,188 - ubuntu-fai.config - ERROR - logger:log_config_validation:225 - 配置验证失败: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:27,188 - ubuntu-fai.config - ERROR - logger:log_config_validation:228 - 配置错误: Reserved username not allowed: admin
+2025-07-18 14:08:27,188 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 config_validation 失败 - 耗时: 0.00s
+2025-07-18 14:08:27,188 - ubuntu-fai.builder - ERROR - build:load_and_validate_config:117 - Failed to load configuration: Configuration validation failed: ['Reserved username not allowed: admin']
+2025-07-18 14:08:27,188 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: Configuration validation failed: ['Reserved username not allowed: admin']
+2025-07-18 14:08:27,188 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
+2025-07-18 14:08:27,188 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.00s
+2025-07-18 14:08:27,188 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: Configuration validation failed: ['Reserved username not allowed: admin']
+2025-07-18 14:08:47,152 - ubuntu-fai.build - INFO - logger:log_build_start:175 - 开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:47,153 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: config_validation
+2025-07-18 14:08:47,154 - ubuntu-fai.builder - INFO - build:load_and_validate_config:71 - Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:47,154 - ubuntu-fai.config - INFO - logger:log_config_validation:220 - 配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:47,154 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:08:47,154 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:08:47,155 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 config_validation 完成 - 耗时: 0.00s
+2025-07-18 14:08:47,155 - ubuntu-fai.builder - INFO - build:load_and_validate_config:108 - Configuration loaded and validated successfully
+2025-07-18 14:08:47,155 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: asset_download
+2025-07-18 14:08:47,155 - ubuntu-fai.builder - INFO - build:download_assets:130 - Downloading required assets...
+2025-07-18 14:08:47,156 - ubuntu-fai.builder - INFO - build:download_assets:138 - Downloading 2 packages...
+2025-07-18 14:08:59,819 - ubuntu-fai.builder - INFO - build:download_assets:146 - Downloading 3 scripts...
+2025-07-18 14:09:00,112 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 asset_download 失败 - 耗时: 12.96s
+2025-07-18 14:09:00,112 - ubuntu-fai.builder - ERROR - build:download_assets:162 - Asset download failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:09:00,113 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:09:00,113 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
+2025-07-18 14:09:00,113 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 12.96s
+2025-07-18 14:09:00,113 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:09:10,994 - ubuntu-fai.build - INFO - logger:log_build_start:175 - 开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:09:10,995 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: config_validation
+2025-07-18 14:09:10,995 - ubuntu-fai.builder - INFO - build:load_and_validate_config:71 - Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:09:10,996 - ubuntu-fai.config - INFO - logger:log_config_validation:220 - 配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:09:10,996 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:09:10,996 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:09:10,996 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 config_validation 完成 - 耗时: 0.00s
+2025-07-18 14:09:10,996 - ubuntu-fai.builder - INFO - build:load_and_validate_config:108 - Configuration loaded and validated successfully
+2025-07-18 14:09:10,996 - ubuntu-fai.builder - INFO - build:build:379 - Skipping asset downloads as requested
+2025-07-18 14:09:10,996 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: autoinstall_generation
+2025-07-18 14:09:10,996 - ubuntu-fai.builder - INFO - build:generate_autoinstall_config:176 - Generating autoinstall configuration...
+2025-07-18 14:09:11,002 - ubuntu-fai.template - INFO - logger:log_template_generation:249 - 模板生成成功: user-data.yaml.j2 -> output/user-data.yaml
+2025-07-18 14:09:11,002 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 autoinstall_generation 完成 - 耗时: 0.01s
+2025-07-18 14:09:11,002 - ubuntu-fai.builder - INFO - build:generate_autoinstall_config:191 - Autoinstall configuration generated: output/user-data.yaml
+2025-07-18 14:09:11,002 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: fai_generation
+2025-07-18 14:09:11,002 - ubuntu-fai.builder - INFO - build:generate_fai_config:217 - Generating FAI configuration...
+2025-07-18 14:09:11,083 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 fai_generation 完成 - 耗时: 0.08s
+2025-07-18 14:09:11,083 - ubuntu-fai.builder - INFO - build:generate_fai_config:229 - FAI configuration generated: output/fai-config
+2025-07-18 14:09:11,083 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: first_boot_generation
+2025-07-18 14:09:11,084 - ubuntu-fai.builder - INFO - build:generate_first_boot_config:252 - Generating first-boot configuration...
+2025-07-18 14:09:11,090 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 first_boot_generation 失败 - 耗时: 0.01s
+2025-07-18 14:09:11,090 - ubuntu-fai.builder - ERROR - build:generate_first_boot_config:273 - First-boot configuration generation failed: 'FirstBootScript' object has no attribute 'name'
+2025-07-18 14:09:11,090 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 'FirstBootScript' object has no attribute 'name'
+2025-07-18 14:09:11,090 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
+2025-07-18 14:09:11,091 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.10s
+2025-07-18 14:09:11,091 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 'FirstBootScript' object has no attribute 'name'
+2025-07-18 14:11:34,976 - ubuntu-fai.build - INFO - logger:log_build_start:175 - 开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:11:34,977 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: config_validation
+2025-07-18 14:11:34,977 - ubuntu-fai.builder - INFO - build:load_and_validate_config:71 - Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:11:34,978 - ubuntu-fai.config - INFO - logger:log_config_validation:220 - 配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:11:34,978 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:34,978 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:34,978 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 config_validation 完成 - 耗时: 0.00s
+2025-07-18 14:11:34,978 - ubuntu-fai.builder - INFO - build:load_and_validate_config:108 - Configuration loaded and validated successfully
+2025-07-18 14:11:34,978 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: asset_download
+2025-07-18 14:11:34,978 - ubuntu-fai.builder - INFO - build:download_assets:130 - Downloading required assets...
+2025-07-18 14:11:34,979 - ubuntu-fai.builder - INFO - build:download_assets:138 - Downloading 2 packages...
+2025-07-18 14:11:34,979 - ubuntu-fai.builder - INFO - build:download_assets:146 - Downloading 3 scripts...
+2025-07-18 14:11:35,171 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 asset_download 失败 - 耗时: 0.19s
+2025-07-18 14:11:35,172 - ubuntu-fai.builder - ERROR - build:download_assets:162 - Asset download failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:11:35,172 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:11:35,172 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
+2025-07-18 14:11:35,172 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.20s
+2025-07-18 14:11:35,172 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:11:48,060 - ubuntu-fai.build - INFO - logger:log_build_start:175 - 开始构建进程 - 配置文件: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:11:48,061 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: config_validation
+2025-07-18 14:11:48,061 - ubuntu-fai.builder - INFO - build:load_and_validate_config:71 - Loading configuration from /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:11:48,062 - ubuntu-fai.config - INFO - logger:log_config_validation:220 - 配置验证通过: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:11:48,063 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:48,063 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:48,063 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 config_validation 完成 - 耗时: 0.00s
+2025-07-18 14:11:48,063 - ubuntu-fai.builder - INFO - build:load_and_validate_config:108 - Configuration loaded and validated successfully
+2025-07-18 14:11:48,063 - ubuntu-fai.builder - INFO - build:build:379 - Skipping asset downloads as requested
+2025-07-18 14:11:48,063 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: autoinstall_generation
+2025-07-18 14:11:48,063 - ubuntu-fai.builder - INFO - build:generate_autoinstall_config:176 - Generating autoinstall configuration...
+2025-07-18 14:11:48,070 - ubuntu-fai.template - INFO - logger:log_template_generation:249 - 模板生成成功: user-data.yaml.j2 -> output/user-data.yaml
+2025-07-18 14:11:48,070 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 autoinstall_generation 完成 - 耗时: 0.01s
+2025-07-18 14:11:48,070 - ubuntu-fai.builder - INFO - build:generate_autoinstall_config:191 - Autoinstall configuration generated: output/user-data.yaml
+2025-07-18 14:11:48,070 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: fai_generation
+2025-07-18 14:11:48,070 - ubuntu-fai.builder - INFO - build:generate_fai_config:217 - Generating FAI configuration...
+2025-07-18 14:11:48,148 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 fai_generation 完成 - 耗时: 0.08s
+2025-07-18 14:11:48,149 - ubuntu-fai.builder - INFO - build:generate_fai_config:229 - FAI configuration generated: output/fai-config
+2025-07-18 14:11:48,149 - ubuntu-fai.build - INFO - logger:log_phase_start:194 - 开始阶段: first_boot_generation
+2025-07-18 14:11:48,149 - ubuntu-fai.builder - INFO - build:generate_first_boot_config:252 - Generating first-boot configuration...
+2025-07-18 14:11:48,155 - ubuntu-fai.build - INFO - logger:log_phase_end:210 - 阶段 first_boot_generation 完成 - 耗时: 0.01s
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:generate_first_boot_config:264 - First-boot configuration generated: output/first-boot
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:402 - Skipping FAI build as requested
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:407 - Configuration generation completed in 0.09s
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:409 - Phase timings:
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:411 -   config_validation: 0.00s
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:411 -   autoinstall_generation: 0.01s
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:411 -   fai_generation: 0.08s
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:build:411 -   first_boot_generation: 0.01s
+2025-07-18 14:11:48,155 - ubuntu-fai.builder - INFO - build:cleanup_temp_files:355 - Cleaning up temporary files...
+2025-07-18 14:11:48,156 - ubuntu-fai.build - INFO - logger:log_build_end:184 - 构建成功完成 - 耗时: 0.10s
+2025-07-18 14:11:48,156 - ubuntu-fai.main - INFO - build:main:511 - Configuration files generated in: output
diff --git a/logs/error.log b/logs/error.log
index 3a8ae01..cd2a98a 100644
--- a/logs/error.log
+++ b/logs/error.log
@@ -2,3 +2,44 @@
 2025-07-18 13:43:24,676 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: First-boot execution is enabled but no scripts specified. Consider disabling first-boot or adding scripts.
 2025-07-18 13:43:24,676 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
 2025-07-18 13:43:24,676 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: First-boot execution is enabled but no scripts specified. Consider disabling first-boot or adding scripts.
+2025-07-18 14:07:53,485 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 config_validation 失败 - 耗时: 0.00s
+2025-07-18 14:07:53,486 - ubuntu-fai.builder - ERROR - build:load_and_validate_config:117 - Failed to load configuration: 1 validation error for BuildConfig
+  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]
+    For further information visit https://errors.pydantic.dev/2.9/v/value_error
+2025-07-18 14:07:53,486 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 1 validation error for BuildConfig
+  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]
+    For further information visit https://errors.pydantic.dev/2.9/v/value_error
+2025-07-18 14:07:53,486 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.00s
+2025-07-18 14:07:53,486 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 1 validation error for BuildConfig
+  Value error, Dell hardware may have issues with key sizes > 256 bits [type=value_error, input_value={'_comment': 'Ubuntu FAI ...depending on packages'}}, input_type=dict]
+    For further information visit https://errors.pydantic.dev/2.9/v/value_error
+2025-07-18 14:08:27,188 - ubuntu-fai.config - ERROR - logger:log_config_validation:225 - 配置验证失败: /Users/bytedance/Documents/Workspace/Ubuntu-FAI/config.json.example
+2025-07-18 14:08:27,188 - ubuntu-fai.config - ERROR - logger:log_config_validation:228 - 配置错误: Reserved username not allowed: admin
+2025-07-18 14:08:27,188 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 config_validation 失败 - 耗时: 0.00s
+2025-07-18 14:08:27,188 - ubuntu-fai.builder - ERROR - build:load_and_validate_config:117 - Failed to load configuration: Configuration validation failed: ['Reserved username not allowed: admin']
+2025-07-18 14:08:27,188 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: Configuration validation failed: ['Reserved username not allowed: admin']
+2025-07-18 14:08:27,188 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.00s
+2025-07-18 14:08:27,188 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: Configuration validation failed: ['Reserved username not allowed: admin']
+2025-07-18 14:08:47,154 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:08:47,154 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:09:00,112 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 asset_download 失败 - 耗时: 12.96s
+2025-07-18 14:09:00,112 - ubuntu-fai.builder - ERROR - build:download_assets:162 - Asset download failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:09:00,113 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:09:00,113 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 12.96s
+2025-07-18 14:09:00,113 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:09:10,996 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:09:10,996 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:09:11,090 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 first_boot_generation 失败 - 耗时: 0.01s
+2025-07-18 14:09:11,090 - ubuntu-fai.builder - ERROR - build:generate_first_boot_config:273 - First-boot configuration generation failed: 'FirstBootScript' object has no attribute 'name'
+2025-07-18 14:09:11,090 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 'FirstBootScript' object has no attribute 'name'
+2025-07-18 14:09:11,091 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.10s
+2025-07-18 14:09:11,091 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 'FirstBootScript' object has no attribute 'name'
+2025-07-18 14:11:34,978 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:34,978 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:35,171 - ubuntu-fai.build - ERROR - logger:log_phase_end:212 - 阶段 asset_download 失败 - 耗时: 0.19s
+2025-07-18 14:11:35,172 - ubuntu-fai.builder - ERROR - build:download_assets:162 - Asset download failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:11:35,172 - ubuntu-fai.builder - ERROR - build:build:417 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:11:35,172 - ubuntu-fai.build - ERROR - logger:log_build_end:186 - 构建失败 - 耗时: 0.20s
+2025-07-18 14:11:35,172 - ubuntu-fai.main - ERROR - build:main:528 - Build failed: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/example/scripts/main/system-setup.sh
+2025-07-18 14:11:48,063 - ubuntu-fai.config - WARNING - logger:log_config_validation:223 - 配置警告: Consider using key size 512 for stronger encryption
+2025-07-18 14:11:48,063 - ubuntu-fai.builder - WARNING - build:load_and_validate_config:99 - Configuration warning: Consider using key size 512 for stronger encryption
diff --git a/logs/session_20250718_141148.json b/logs/session_20250718_141148.json
new file mode 100644
index 0000000..b3c3a5c
--- /dev/null
+++ b/logs/session_20250718_141148.json
@@ -0,0 +1,9 @@
+{
+  "session_id": "20250718_141148",
+  "timestamp": "2025-07-18T14:11:48.156105",
+  "log_files": {
+    "main": "logs/build.log",
+    "error": "logs/error.log",
+    "json": "logs/build.json"
+  }
+}
\ No newline at end of file
diff --git a/output/fai-config/fai-config/class/40-DYNAMIC.sh b/output/fai-config/fai-config/class/40-DYNAMIC.sh
index 020047d..8b5df57 100755
--- a/output/fai-config/fai-config/class/40-DYNAMIC.sh
+++ b/output/fai-config/fai-config/class/40-DYNAMIC.sh
@@ -36,19 +36,26 @@ echo "SNAP_PACKAGES"
 echo "NETWORK_DHCP"
 
 # User configuration classes
+echo "SSH_KEYS"
 
 
 # First-boot classes
 echo "FIRST_BOOT"
+echo "FIRST_BOOT_AUTO"
+echo "FIRST_BOOT_AUTO"
+echo "FIRST_BOOT_MANUAL"
 
 # Development and tools classes
 echo "DEVELOPMENT_TOOLS"
 
 # Docker class if docker packages are included
+echo "DOCKER"
 
 # Multimedia class for media packages
+echo "MULTIMEDIA"
 
 # Office productivity class
+echo "OFFICE_PRODUCTIVITY"
 
 # Security tools class
 
@@ -58,9 +65,9 @@ echo "FAIEND"
 # Export variables for use in other FAI scripts
 export FAI_HARDWARE_VENDOR="HardwareVendor.DELL"
 export FAI_ENCRYPTION_ENABLED="true"
-export FAI_USER_NAME="testuser"
-export FAI_HOSTNAME="ubuntu-fai-test"
-export FAI_BUILD_TIMESTAMP="2025-07-18T13:43:24.746374"
+export FAI_USER_NAME="ubuntu"
+export FAI_HOSTNAME="ubuntu-fai-desktop"
+export FAI_BUILD_TIMESTAMP="2025-07-18T14:11:48.147044"
 
 # Log class assignment for debugging
 {
@@ -70,9 +77,9 @@ export FAI_BUILD_TIMESTAMP="2025-07-18T13:43:24.746374"
     echo "Encryption Enabled: True"
 echo "Encryption Cipher: aes-xts-plain64"
     echo "Key Size: 256"
-echo "Custom Packages: 3"
-    echo "DEB URLs: 0"
-    echo "First Boot Scripts: 0"
-    echo "Build Date: 2025-07-18T13:43:24.746374"
+echo "Custom Packages: 13"
+    echo "DEB URLs: 2"
+    echo "First Boot Scripts: 3"
+    echo "Build Date: 2025-07-18T14:11:48.147044"
     echo "==========================="
 } >> $LOGDIR/fai-class-assignment.log 2>/dev/null || true
\ No newline at end of file
diff --git a/output/fai-config/fai-config/class/50-ENVIRONMENT.sh b/output/fai-config/fai-config/class/50-ENVIRONMENT.sh
index 0b6474a..2e7b579 100755
--- a/output/fai-config/fai-config/class/50-ENVIRONMENT.sh
+++ b/output/fai-config/fai-config/class/50-ENVIRONMENT.sh
@@ -1,25 +1,27 @@
 #!/bin/bash
 # FAI environment configuration
 # Dynamically generated from user configuration
-# Generated at: 2025-07-18T13:43:24.747370
+# Generated at: 2025-07-18T14:11:48.147950
 
 # Export configuration variables for use in FAI scripts
-export FAI_USER_NAME="testuser"
-export FAI_USER_FULL_NAME="Test User"
+export FAI_USER_NAME="ubuntu"
+export FAI_USER_FULL_NAME="System Administrator"
 export FAI_SUDO_NOPASSWD="false"
 export FAI_HARDWARE_VENDOR="dell"
 export FAI_TARGET_SSD="true"
 export FAI_ENCRYPTION_ENABLED="true"
-export FAI_HOSTNAME="ubuntu-fai-test"
+export FAI_HOSTNAME="ubuntu-fai-desktop"
 export FAI_DHCP="true"
 export FAI_FIRST_BOOT_ENABLED="true"
-export FAI_BUILD_TIMESTAMP="2025-07-18T13:43:24.747358"
-export FAI_ISO_LABEL="Ubuntu-FAI"
+export FAI_BUILD_TIMESTAMP="2025-07-18T14:11:48.147942"
+export FAI_ISO_LABEL="Ubuntu-24.04-FAI"
 export LUKS_CIPHER="aes-xts-plain64"
 export LUKS_KEY_SIZE="256"
 export LUKS_HASH="sha256"
-export CUSTOM_APT_PACKAGES="git curl vim"
-export CUSTOM_SNAP_PACKAGES="code"
+export CUSTOM_APT_PACKAGES="curl wget git vim htop build-essential python3-pip docker.io firefox libreoffice gimp vlc thunderbird"
+export CUSTOM_DEB_URLS="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb,https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
+export CUSTOM_SNAP_PACKAGES="discord,slack,zoom-client"
+export FAI_SSH_KEYS="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP7j8Qv0hBJ7rMN3bNGkGl9L8FhZ7x admin@workstation\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDExample... admin@laptop"
 
 # Log environment setup
 echo "$(date): FAI environment configured" >> $LOGDIR/environment.log
diff --git a/output/fai-config/fai-config/package_config/CUSTOM_SOFTWARE b/output/fai-config/fai-config/package_config/CUSTOM_SOFTWARE
index 86df9f3..6dbe56d 100644
--- a/output/fai-config/fai-config/package_config/CUSTOM_SOFTWARE
+++ b/output/fai-config/fai-config/package_config/CUSTOM_SOFTWARE
@@ -1,13 +1,23 @@
 # FAI package configuration for custom software
 # Dynamically generated from user configuration
-# Generated at: 2025-07-18T13:43:24.747054
+# Generated at: 2025-07-18T14:11:48.147537
 
 PACKAGES install
 
 # User-specified APT packages
-git
 curl
+wget
+git
 vim
+htop
+build-essential
+python3-pip
+docker.io
+firefox
+libreoffice
+gimp
+vlc
+thunderbird
 
 # Hardware-specific packages (populated by class scripts)
 # $HARDWARE_PACKAGES will be expanded during FAI execution
diff --git a/output/first-boot/first-boot.service b/output/first-boot/first-boot.service
index f83e5d3..b7d84af 100644
--- a/output/first-boot/first-boot.service
+++ b/output/first-boot/first-boot.service
@@ -39,7 +39,7 @@ RestartSec=5
 # Environment variables
 Environment="FAI_BUILD_TYPE=HardwareVendor.DELL"
 Environment="FAI_ENCRYPTION_ENABLED=true"
-Environment="FAI_SCRIPT_COUNT=0"
+Environment="FAI_SCRIPT_COUNT=3"
 Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
 
 # Resource limits
diff --git a/output/first-boot/first-boot.sh b/output/first-boot/first-boot.sh
index 373b5a0..f4842d7 100755
--- a/output/first-boot/first-boot.sh
+++ b/output/first-boot/first-boot.sh
@@ -70,6 +70,7 @@ esac
 
 
 # Run custom scripts
+log_info "Running custom first-boot scripts..."
 
 # System cleanup and optimization
 log_info "Performing system cleanup..."
diff --git a/output/user-data.yaml b/output/user-data.yaml
index 65a2926..035b243 100644
--- a/output/user-data.yaml
+++ b/output/user-data.yaml
@@ -28,9 +28,9 @@ autoinstall:
   
   # Identity and user configuration
   identity:
-    hostname: "ubuntu-fai-test"
-    username: "testuser"
-    realname: "Test User"
+    hostname: "ubuntu-fai-desktop"
+    username: "ubuntu"
+    realname: "System Administrator"
   
   # SSH configuration
   ssh:
diff --git a/run-conda.sh b/run-conda.sh
deleted file mode 100755
index e8483be..0000000
--- a/run-conda.sh
+++ /dev/null
@@ -1,376 +0,0 @@
-#!/bin/bash
-# Ubuntu FAI Build System Docker Runner with Conda Support
-# 使用 conda 环境的 Docker 构建和执行脚本
-
-set -euo pipefail
-
-# 脚本配置
-SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
-IMAGE_NAME="ubuntu-fai-conda"
-IMAGE_TAG="latest"
-CONTAINER_NAME="ubuntu-fai-conda-build"
-DOCKERFILE="Dockerfile.conda"
-
-# 颜色输出
-RED='\033[0;31m'
-GREEN='\033[0;32m'
-YELLOW='\033[1;33m'
-BLUE='\033[0;34m'
-NC='\033[0m'
-
-# 日志函数
-log_info() {
-    echo -e "${BLUE}[INFO]${NC} $1"
-}
-
-log_success() {
-    echo -e "${GREEN}[SUCCESS]${NC} $1"
-}
-
-log_warning() {
-    echo -e "${YELLOW}[WARNING]${NC} $1"
-}
-
-log_error() {
-    echo -e "${RED}[ERROR]${NC} $1"
-}
-
-# 使用说明
-usage() {
-    cat << EOF
-Ubuntu FAI Build System Docker Runner (Conda 版本)
-
-用法:
-    $0 [选项] <config.json> [构建参数...]
-
-选项:
-    -h, --help              显示此帮助信息
-    -b, --build             强制重新构建 Docker 镜像
-    -c, --clean             清理容器和镜像
-    -d, --debug             启用调试模式（详细输出）
-    --no-cache              构建镜像时不使用缓存
-    --output-dir DIR        指定输出目录（默认: ./output）
-    --local                 使用本地 conda 环境（不使用 Docker）
-
-构建参数（传递给 build.py）:
-    --skip-downloads        跳过资产下载（使用缓存文件）
-    --skip-fai              跳过 FAI 构建过程（仅生成配置）
-    --cache-dir DIR         缓存目录路径
-    --debug                 启用调试日志
-
-示例:
-    $0 config.json.example                        # 使用示例配置构建 ISO
-    $0 --build config.json.example               # 重新构建镜像后构建
-    $0 --local config.json.example               # 使用本地 conda 环境
-    $0 --local --skip-fai config.json.example    # 本地环境，仅生成配置
-    $0 --output-dir /tmp/iso config.json         # 自定义输出目录
-    $0 --debug config.json                       # 启用详细日志
-
-注意:
-    - Docker 必须已安装并运行（除非使用 --local）
-    - 配置文件必须存在且可读
-    - 输出目录会自动创建（如果不存在）
-    - 使用 --local 时需要先运行 ./setup-conda-env.sh
-
-EOF
-}
-
-# 解析命令行参数
-FORCE_BUILD=false
-CLEAN=false
-DEBUG=false
-NO_CACHE=false
-USE_LOCAL=false
-OUTPUT_DIR="$SCRIPT_DIR/output"
-CONFIG_FILE=""
-BUILD_ARGS=()
-
-while [[ $# -gt 0 ]]; do
-    case $1 in
-        -h|--help)
-            usage
-            exit 0
-            ;;
-        -b|--build)
-            FORCE_BUILD=true
-            shift
-            ;;
-        -c|--clean)
-            CLEAN=true
-            shift
-            ;;
-        -d|--debug)
-            DEBUG=true
-            shift
-            ;;
-        --no-cache)
-            NO_CACHE=true
-            shift
-            ;;
-        --local)
-            USE_LOCAL=true
-            shift
-            ;;
-        --output-dir)
-            OUTPUT_DIR="$2"
-            shift 2
-            ;;
-        --skip-downloads|--skip-fai|--cache-dir)
-            # These are build.py arguments, pass them through
-            BUILD_ARGS+=("$1")
-            if [[ "$1" == "--cache-dir" && $# -gt 1 && ! "$2" =~ ^- ]]; then
-                BUILD_ARGS+=("$2")
-                shift 2
-            else
-                shift
-            fi
-            ;;
-        -*)
-            # Unknown options - could be build.py arguments, pass them through
-            BUILD_ARGS+=("$1")
-            shift
-            ;;
-        *)
-            if [[ -z "$CONFIG_FILE" ]]; then
-                CONFIG_FILE="$1"
-            else
-                BUILD_ARGS+=("$1")
-            fi
-            shift
-            ;;
-    esac
-done
-
-# 启用调试模式
-if [[ "$DEBUG" == "true" ]]; then
-    set -x
-    log_info "调试模式已启用"
-fi
-
-# 清理函数
-cleanup() {
-    if [[ "$CLEAN" == "true" ]]; then
-        log_info "清理 Docker 容器和镜像..."
-        docker container rm -f "$CONTAINER_NAME" 2>/dev/null || true
-        docker image rm -f "$IMAGE_NAME:$IMAGE_TAG" 2>/dev/null || true
-        log_success "清理完成"
-        exit 0
-    fi
-}
-
-# 检查本地 conda 环境
-check_local_conda() {
-    if ! command -v conda &> /dev/null; then
-        log_error "conda 未找到。请安装 Miniconda 或 Anaconda"
-        log_info "安装指南: https://docs.conda.io/en/latest/miniconda.html"
-        exit 1
-    fi
-
-    # 检查 ubuntu-fai 环境是否存在
-    if ! conda env list | grep -q "ubuntu-fai"; then
-        log_error "conda 环境 'ubuntu-fai' 未找到"
-        log_info "请运行: ./setup-conda-env.sh"
-        exit 1
-    fi
-
-    log_info "使用本地 conda 环境: ubuntu-fai"
-}
-
-# 检查 Docker 可用性（仅非本地模式）
-check_docker() {
-    if [[ "$USE_LOCAL" == "true" ]]; then
-        return 0
-    fi
-
-    if ! command -v docker &> /dev/null; then
-        log_error "Docker 未安装或不在 PATH 中"
-        log_info "请安装 Docker: https://docs.docker.com/get-docker/"
-        exit 1
-    fi
-
-    if ! docker info &> /dev/null; then
-        log_error "Docker 守护进程未运行"
-        log_info "请启动 Docker 后重试"
-        exit 1
-    fi
-}
-
-# 构建 Docker 镜像
-build_image() {
-    local build_args=()
-    
-    if [[ "$NO_CACHE" == "true" ]]; then
-        build_args+=("--no-cache")
-    fi
-
-    log_info "构建 Docker 镜像: $IMAGE_NAME:$IMAGE_TAG"
-    
-    if ! docker build ${build_args[@]+"${build_args[@]}"} -f "$DOCKERFILE" -t "$IMAGE_NAME:$IMAGE_TAG" "$SCRIPT_DIR"; then
-        log_error "Docker 镜像构建失败"
-        exit 1
-    fi
-    
-    log_success "Docker 镜像构建成功"
-}
-
-# 检查并构建镜像
-check_and_build_image() {
-    if [[ "$USE_LOCAL" == "true" ]]; then
-        return 0
-    fi
-
-    if [[ "$FORCE_BUILD" == "true" ]] || ! docker image inspect "$IMAGE_NAME:$IMAGE_TAG" &> /dev/null; then
-        build_image
-    else
-        log_info "使用现有 Docker 镜像: $IMAGE_NAME:$IMAGE_TAG"
-    fi
-}
-
-# 验证配置文件
-validate_config() {
-    if [[ -z "$CONFIG_FILE" ]]; then
-        log_error "未指定配置文件"
-        usage
-        exit 1
-    fi
-
-    if [[ ! -f "$CONFIG_FILE" ]]; then
-        log_error "配置文件不存在: $CONFIG_FILE"
-        exit 1
-    fi
-
-    if [[ ! -r "$CONFIG_FILE" ]]; then
-        log_error "配置文件不可读: $CONFIG_FILE"
-        exit 1
-    fi
-
-    # 转换为绝对路径
-    CONFIG_FILE="$(realpath "$CONFIG_FILE")"
-    log_info "使用配置文件: $CONFIG_FILE"
-}
-
-# 准备输出目录
-prepare_output_dir() {
-    # 转换为绝对路径
-    if [[ "$OSTYPE" == "darwin"* ]]; then
-        # macOS doesn't support -m flag
-        OUTPUT_DIR="$(cd "$(dirname "$OUTPUT_DIR")" 2>/dev/null && pwd)/$(basename "$OUTPUT_DIR")" || OUTPUT_DIR="$PWD/$OUTPUT_DIR"
-    else
-        OUTPUT_DIR="$(realpath -m "$OUTPUT_DIR")"
-    fi
-    
-    if [[ ! -d "$OUTPUT_DIR" ]]; then
-        log_info "创建输出目录: $OUTPUT_DIR"
-        mkdir -p "$OUTPUT_DIR"
-    fi
-    
-    if [[ ! -w "$OUTPUT_DIR" ]]; then
-        log_error "输出目录不可写: $OUTPUT_DIR"
-        exit 1
-    fi
-    
-    log_info "使用输出目录: $OUTPUT_DIR"
-}
-
-# 获取用户信息（用于权限映射）
-get_user_info() {
-    if [[ "$OSTYPE" == "darwin"* ]]; then
-        # macOS
-        USER_ID=$(id -u)
-        GROUP_ID=$(id -g)
-    else
-        # Linux
-        USER_ID=$(id -u)
-        GROUP_ID=$(id -g)
-    fi
-    
-    log_info "运行容器使用 UID:GID = $USER_ID:$GROUP_ID"
-}
-
-# 本地模式运行
-run_local() {
-    log_info "使用本地 conda 环境运行构建..."
-    
-    # 激活 conda 环境并运行
-    if conda run -n ubuntu-fai python build.py "$CONFIG_FILE" "${BUILD_ARGS[@]}"; then
-        log_success "本地构建完成"
-        log_info "检查输出目录: $OUTPUT_DIR"
-    else
-        log_error "本地构建失败"
-        exit 1
-    fi
-}
-
-# Docker 模式运行
-run_container() {
-    local docker_args=(
-        "run"
-        "--rm"
-        "--name" "$CONTAINER_NAME"
-        "--user" "$USER_ID:$GROUP_ID"
-        "--volume" "$CONFIG_FILE:/app/config.json:ro"
-        "--volume" "$OUTPUT_DIR:/app/output:rw"
-        "--volume" "$SCRIPT_DIR:/app/host-src:ro"
-        "--workdir" "/app"
-    )
-
-    # 添加特权模式用于 FAI 操作（ISO 创建需要 loop 设备）
-    docker_args+=("--privileged")
-    
-    # 添加环境变量
-    docker_args+=("--env" "PYTHONUNBUFFERED=1")
-    
-    if [[ "$DEBUG" == "true" ]]; then
-        docker_args+=("--env" "FAI_DEBUG=1")
-    fi
-
-    # 添加镜像和命令
-    docker_args+=("$IMAGE_NAME:$IMAGE_TAG")
-    docker_args+=("python" "build.py" "config.json")
-    docker_args+=("${BUILD_ARGS[@]}")
-
-    log_info "启动 Ubuntu FAI 构建容器..."
-    log_info "容器名称: $CONTAINER_NAME"
-    log_info "配置文件: $CONFIG_FILE"
-    log_info "输出目录: $OUTPUT_DIR"
-    
-    if ! docker "${docker_args[@]}"; then
-        log_error "容器执行失败"
-        exit 1
-    fi
-    
-    log_success "构建完成"
-    log_info "检查输出目录: $OUTPUT_DIR"
-}
-
-# 主执行函数
-main() {
-    # 处理清理请求
-    cleanup
-    
-    # 验证环境
-    if [[ "$USE_LOCAL" == "true" ]]; then
-        check_local_conda
-    else
-        check_docker
-    fi
-    
-    # 验证输入
-    validate_config
-    prepare_output_dir
-    
-    # 执行构建
-    if [[ "$USE_LOCAL" == "true" ]]; then
-        run_local
-    else
-        get_user_info
-        check_and_build_image
-        run_container
-    fi
-}
-
-# 信号处理
-trap 'log_warning "用户中断"; exit 130' INT TERM
-
-# 运行主函数
-main "$@"
\ No newline at end of file
diff --git a/run.sh b/run.sh
index 7b4915d..70a41c9 100755
--- a/run.sh
+++ b/run.sh
@@ -1,298 +1,257 @@
 #!/bin/bash
-# Ubuntu FAI Build System Docker Runner
-# Handles Docker build and execution with proper volume mounts and permissions
 
-set -euo pipefail  # Exit on error, undefined vars, pipe failures
+# Ubuntu FAI Build System - 构建运行脚本
+# 使用 Python 虚拟环境运行 Ubuntu FAI 构建系统
 
-# Script configuration
+set -euo pipefail
+
+# 脚本配置
 SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
-IMAGE_NAME="ubuntu-fai"
-IMAGE_TAG="latest"
-CONTAINER_NAME="ubuntu-fai-build"
+VENV_NAME="ubuntu-fai-venv"
+VENV_PATH="$SCRIPT_DIR/$VENV_NAME"
 
-# Colors for output
-RED='\033[0;31m'
-GREEN='\033[0;32m'
-YELLOW='\033[1;33m'
-BLUE='\033[0;34m'
-NC='\033[0m' # No Color
+# 默认参数
+CONFIG_FILE=""
+SKIP_DOWNLOADS=false
+SKIP_FAI=false
+DEBUG=false
+HELP=false
 
-# Logging functions
+# 颜色输出函数
 log_info() {
-    echo -e "${BLUE}[INFO]${NC} $1"
+    echo -e "\033[0;34m[INFO]\033[0m $1"
 }
 
 log_success() {
-    echo -e "${GREEN}[SUCCESS]${NC} $1"
+    echo -e "\033[0;32m[SUCCESS]\033[0m $1"
 }
 
-log_warning() {
-    echo -e "${YELLOW}[WARNING]${NC} $1"
+log_error() {
+    echo -e "\033[0;31m[ERROR]\033[0m $1"
 }
 
-log_error() {
-    echo -e "${RED}[ERROR]${NC} $1"
+log_warning() {
+    echo -e "\033[0;33m[WARNING]\033[0m $1"
 }
 
-# Usage information
-usage() {
+# 显示帮助信息
+show_help() {
     cat << EOF
-Ubuntu FAI Build System Docker Runner
+Ubuntu FAI Build System - 构建运行脚本
 
-USAGE:
-    $0 [OPTIONS] <config.json> [BUILD_ARGS...]
+用法: $0 [选项] <配置文件>
 
-OPTIONS:
-    -h, --help              Show this help message
-    -b, --build             Force rebuild of Docker image
-    -c, --clean             Clean up containers and images
-    -d, --debug             Enable debug mode (verbose output)
-    --no-cache              Build Docker image without cache
-    --output-dir DIR        Specify output directory (default: ./output)
+选项:
+  --skip-downloads    跳过资源下载阶段
+  --skip-fai         跳过 FAI ISO 构建阶段
+  --debug            启用调试模式
+  --help             显示此帮助信息
 
-EXAMPLES:
-    $0 config.json.example                    # Build ISO with example config
-    $0 --build config.json.example           # Rebuild Docker image first
-    $0 --output-dir /tmp/iso config.json     # Custom output directory
-    $0 --debug config.json                   # Enable verbose logging
+参数:
+  <配置文件>         构建配置文件路径 (例如: config.json.example)
 
-NOTES:
-    - Docker must be installed and running
-    - Config file must exist and be readable
-    - Output directory will be created if it doesn't exist
-    - Container runs with current user permissions for file access
+示例:
+  $0 config.json.example
+  $0 --skip-downloads config.json.example
+  $0 --debug --skip-fai config.json.example
 
+注意:
+  - 请确保已经运行 ./setup-venv.sh 创建虚拟环境
+  - 构建需要在 Ubuntu 环境中运行
+  - 使用 --skip-fai 仅生成配置文件而不构建 ISO
 EOF
 }
 
-# Parse command line arguments
-FORCE_BUILD=false
-CLEAN=false
-DEBUG=false
-NO_CACHE=false
-OUTPUT_DIR="$SCRIPT_DIR/output"
-CONFIG_FILE=""
-BUILD_ARGS=()
-
-while [[ $# -gt 0 ]]; do
-    case $1 in
-        -h|--help)
-            usage
-            exit 0
-            ;;
-        -b|--build)
-            FORCE_BUILD=true
-            shift
-            ;;
-        -c|--clean)
-            CLEAN=true
-            shift
-            ;;
-        -d|--debug)
-            DEBUG=true
-            shift
-            ;;
-        --no-cache)
-            NO_CACHE=true
-            shift
-            ;;
-        --output-dir)
-            OUTPUT_DIR="$2"
-            shift 2
-            ;;
-        -*)
-            log_error "Unknown option: $1"
-            usage
-            exit 1
-            ;;
-        *)
-            if [[ -z "$CONFIG_FILE" ]]; then
-                CONFIG_FILE="$1"
-            else
-                BUILD_ARGS+=("$1")
-            fi
-            shift
-            ;;
-    esac
-done
-
-# Enable debug mode if requested
-if [[ "$DEBUG" == "true" ]]; then
-    set -x
-    log_info "Debug mode enabled"
-fi
-
-# Clean up function
-cleanup() {
-    if [[ "$CLEAN" == "true" ]]; then
-        log_info "Cleaning up Docker containers and images..."
-        docker container rm -f "$CONTAINER_NAME" 2>/dev/null || true
-        docker image rm -f "$IMAGE_NAME:$IMAGE_TAG" 2>/dev/null || true
-        log_success "Cleanup completed"
+# 解析命令行参数
+parse_arguments() {
+    while [[ $# -gt 0 ]]; do
+        case $1 in
+            --skip-downloads)
+                SKIP_DOWNLOADS=true
+                shift
+                ;;
+            --skip-fai)
+                SKIP_FAI=true
+                shift
+                ;;
+            --debug)
+                DEBUG=true
+                shift
+                ;;
+            --help|-h)
+                HELP=true
+                shift
+                ;;
+            -*)
+                log_error "未知选项: $1"
+                show_help
+                exit 1
+                ;;
+            *)
+                if [[ -z "$CONFIG_FILE" ]]; then
+                    CONFIG_FILE="$1"
+                else
+                    log_error "多余的参数: $1"
+                    show_help
+                    exit 1
+                fi
+                shift
+                ;;
+        esac
+    done
+    
+    if [[ "$HELP" == true ]]; then
+        show_help
         exit 0
     fi
-}
-
-# Check Docker availability
-check_docker() {
-    if ! command -v docker &> /dev/null; then
-        log_error "Docker is not installed or not in PATH"
-        log_info "Please install Docker: https://docs.docker.com/get-docker/"
-        exit 1
-    fi
-
-    if ! docker info &> /dev/null; then
-        log_error "Docker daemon is not running"
-        log_info "Please start Docker and try again"
+    
+    if [[ -z "$CONFIG_FILE" ]]; then
+        log_error "缺少配置文件参数"
+        show_help
         exit 1
     fi
 }
 
-# Build Docker image
-build_image() {
-    local build_args=()
+# 检查虚拟环境
+check_virtual_environment() {
+    log_info "检查 Python 虚拟环境..."
     
-    if [[ "$NO_CACHE" == "true" ]]; then
-        build_args+=("--no-cache")
+    if [[ ! -d "$VENV_PATH" ]]; then
+        log_error "虚拟环境不存在: $VENV_PATH"
+        log_info "请先运行: ./setup-venv.sh"
+        exit 1
     fi
-
-    log_info "Building Docker image: $IMAGE_NAME:$IMAGE_TAG"
     
-    if ! docker build "${build_args[@]}" -t "$IMAGE_NAME:$IMAGE_TAG" "$SCRIPT_DIR"; then
-        log_error "Failed to build Docker image"
+    if [[ ! -f "$VENV_PATH/bin/activate" ]]; then
+        log_error "虚拟环境激活脚本不存在: $VENV_PATH/bin/activate"
+        log_info "请重新运行: ./setup-venv.sh"
         exit 1
     fi
     
-    log_success "Docker image built successfully"
+    log_success "虚拟环境检查通过: $VENV_NAME"
 }
 
-# Check if image exists and build if necessary
-check_and_build_image() {
-    if [[ "$FORCE_BUILD" == "true" ]] || ! docker image inspect "$IMAGE_NAME:$IMAGE_TAG" &> /dev/null; then
-        build_image
-    else
-        log_info "Using existing Docker image: $IMAGE_NAME:$IMAGE_TAG"
-    fi
-}
-
-# Validate config file
+# 验证配置文件
 validate_config() {
+    log_info "验证配置文件..."
+    
     if [[ -z "$CONFIG_FILE" ]]; then
-        log_error "No configuration file specified"
-        usage
+        log_error "未指定配置文件"
         exit 1
     fi
-
+    
     if [[ ! -f "$CONFIG_FILE" ]]; then
-        log_error "Configuration file not found: $CONFIG_FILE"
+        log_error "配置文件不存在: $CONFIG_FILE"
         exit 1
     fi
-
+    
     if [[ ! -r "$CONFIG_FILE" ]]; then
-        log_error "Configuration file not readable: $CONFIG_FILE"
+        log_error "配置文件不可读: $CONFIG_FILE"
         exit 1
     fi
-
-    # Convert to absolute path
-    CONFIG_FILE="$(realpath "$CONFIG_FILE")"
-    log_info "Using configuration file: $CONFIG_FILE"
+    
+    # 获取绝对路径
+    CONFIG_FILE=$(realpath "$CONFIG_FILE")
+    log_success "使用配置文件: $CONFIG_FILE"
 }
 
-# Prepare output directory
+# 准备输出目录
 prepare_output_dir() {
-    # Convert to absolute path
-    OUTPUT_DIR="$(realpath -m "$OUTPUT_DIR")"
+    local output_dir
+    
+    # 确定输出目录路径
+    output_dir="$SCRIPT_DIR/output"
     
-    if [[ ! -d "$OUTPUT_DIR" ]]; then
-        log_info "Creating output directory: $OUTPUT_DIR"
-        mkdir -p "$OUTPUT_DIR"
+    # 检查输出目录
+    if [[ ! -d "$output_dir" ]]; then
+        log_info "创建输出目录: $output_dir"
+        mkdir -p "$output_dir"
     fi
     
-    if [[ ! -w "$OUTPUT_DIR" ]]; then
-        log_error "Output directory not writable: $OUTPUT_DIR"
+    if [[ ! -w "$output_dir" ]]; then
+        log_error "输出目录不可写: $output_dir"
         exit 1
     fi
     
-    log_info "Using output directory: $OUTPUT_DIR"
+    log_success "使用输出目录: $output_dir"
 }
 
-# Get current user ID and group ID for permission mapping
-get_user_info() {
-    if [[ "$OSTYPE" == "darwin"* ]]; then
-        # macOS
-        USER_ID=$(id -u)
-        GROUP_ID=$(id -g)
-    else
-        # Linux
-        USER_ID=$(id -u)
-        GROUP_ID=$(id -g)
+# 构建构建参数
+build_build_args() {
+    local args=()
+    
+    # 添加配置文件参数
+    args+=("$CONFIG_FILE")
+    
+    # 添加可选参数
+    if [[ "$SKIP_DOWNLOADS" == true ]]; then
+        args+=("--skip-downloads")
+    fi
+    
+    if [[ "$SKIP_FAI" == true ]]; then
+        args+=("--skip-fai")
     fi
     
-    log_info "Running container with UID:GID = $USER_ID:$GROUP_ID"
+    if [[ "$DEBUG" == true ]]; then
+        args+=("--debug")
+    fi
+    
+    echo "${args[@]}"
 }
 
-# Run Docker container
-run_container() {
-    local docker_args=(
-        "run"
-        "--rm"
-        "--name" "$CONTAINER_NAME"
-        "--user" "$USER_ID:$GROUP_ID"
-        "--volume" "$CONFIG_FILE:/app/config.json:ro"
-        "--volume" "$OUTPUT_DIR:/app/output:rw"
-        "--volume" "$SCRIPT_DIR:/app/host-src:ro"
-        "--workdir" "/app"
-    )
-
-    # Add privileged mode for FAI operations (ISO creation requires loop devices)
-    docker_args+=("--privileged")
+# 运行构建
+run_build() {
+    log_info "激活虚拟环境并运行构建..."
     
-    # Add environment variables
-    docker_args+=("--env" "PYTHONUNBUFFERED=1")
+    # 激活虚拟环境
+    source "$VENV_PATH/bin/activate"
     
-    if [[ "$DEBUG" == "true" ]]; then
-        docker_args+=("--env" "FAI_DEBUG=1")
+    # 检查 Python 解释器
+    if ! command -v python &> /dev/null; then
+        log_error "虚拟环境中的 Python 解释器不可用"
+        exit 1
     fi
-
-    # Add image and command
-    docker_args+=("$IMAGE_NAME:$IMAGE_TAG")
-    docker_args+=("python3" "build.py" "config.json")
-    docker_args+=("${BUILD_ARGS[@]}")
-
-    log_info "Starting Ubuntu FAI build container..."
-    log_info "Container name: $CONTAINER_NAME"
-    log_info "Config file: $CONFIG_FILE"
-    log_info "Output directory: $OUTPUT_DIR"
     
-    if ! docker "${docker_args[@]}"; then
-        log_error "Container execution failed"
+    # 构建参数
+    local build_args
+    build_args=($(build_build_args))
+    
+    log_info "运行构建命令: python build.py ${build_args[*]}"
+    
+    # 运行构建
+    if python build.py "${build_args[@]}"; then
+        log_success "构建完成成功"
+        log_info "检查输出目录: $SCRIPT_DIR/output"
+    else
+        log_error "构建失败"
         exit 1
     fi
-    
-    log_success "Build completed successfully"
-    log_info "Check output directory: $OUTPUT_DIR"
 }
 
-# Main execution
+# 清理函数
+cleanup() {
+    if [[ "${VIRTUAL_ENV:-}" ]]; then
+        deactivate 2>/dev/null || true
+    fi
+}
+
+# 主函数
 main() {
-    # Handle cleanup if requested
-    cleanup
+    # 显示调试状态
+    if [[ "$DEBUG" == true ]]; then
+        log_info "调试模式已启用"
+    fi
     
-    # Validate environment
-    check_docker
+    # 设置错误处理
+    trap 'log_warning "用户中断"; exit 130' INT TERM
+    trap cleanup EXIT
     
-    # Validate inputs
+    check_virtual_environment
     validate_config
     prepare_output_dir
-    get_user_info
-    
-    # Build and run
-    check_and_build_image
-    run_container
+    run_build
 }
 
-# Trap signals for cleanup
-trap 'log_warning "Interrupted by user"; exit 130' INT TERM
-
-# Run main function
-main "$@"
\ No newline at end of file
+# 解析参数并运行
+parse_arguments "$@"
+main
\ No newline at end of file
diff --git a/setup-conda-env.sh b/setup-conda-env.sh
deleted file mode 100755
index 667e373..0000000
--- a/setup-conda-env.sh
+++ /dev/null
@@ -1,260 +0,0 @@
-#!/bin/bash
-# Ubuntu FAI Build System - Conda 环境设置脚本
-# 本地开发环境初始化
-
-set -euo pipefail
-
-# 脚本配置
-SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
-ENV_NAME="ubuntu-fai"
-ENV_FILE="$SCRIPT_DIR/environment.yml"
-
-# 颜色输出
-RED='\033[0;31m'
-GREEN='\033[0;32m'
-YELLOW='\033[1;33m'
-BLUE='\033[0;34m'
-NC='\033[0m' # No Color
-
-# 日志函数
-log_info() {
-    echo -e "${BLUE}[INFO]${NC} $1"
-}
-
-log_success() {
-    echo -e "${GREEN}[SUCCESS]${NC} $1"
-}
-
-log_warning() {
-    echo -e "${YELLOW}[WARNING]${NC} $1"
-}
-
-log_error() {
-    echo -e "${RED}[ERROR]${NC} $1"
-}
-
-# 使用说明
-usage() {
-    cat << EOF
-Ubuntu FAI Build System - Conda 环境设置
-
-用法:
-    $0 [选项]
-
-选项:
-    -h, --help          显示此帮助信息
-    -r, --recreate      删除现有环境并重新创建
-    -u, --update        更新现有环境
-    -c, --check         检查环境状态
-
-示例:
-    $0                  # 创建环境（如果不存在）
-    $0 --recreate       # 强制重新创建环境
-    $0 --update         # 更新现有环境的包
-
-注意:
-    - 需要预先安装 conda 或 miniconda
-    - 环境名称: $ENV_NAME
-    - 配置文件: $ENV_FILE
-
-EOF
-}
-
-# 检查 conda 是否可用
-check_conda() {
-    if ! command -v conda &> /dev/null; then
-        log_error "conda 未找到。请先安装 Miniconda 或 Anaconda"
-        log_info "下载地址: https://docs.conda.io/en/latest/miniconda.html"
-        exit 1
-    fi
-
-    # 初始化 conda（如果需要）
-    if ! conda info --envs &> /dev/null; then
-        log_info "初始化 conda..."
-        conda init bash
-        log_warning "请重新启动终端或运行 'source ~/.bashrc' 后重试"
-        exit 1
-    fi
-}
-
-# 检查环境文件
-check_environment_file() {
-    if [[ ! -f "$ENV_FILE" ]]; then
-        log_error "环境文件不存在: $ENV_FILE"
-        exit 1
-    fi
-
-    log_info "使用环境文件: $ENV_FILE"
-}
-
-# 检查环境是否存在
-environment_exists() {
-    conda env list | grep -q "^$ENV_NAME "
-}
-
-# 创建环境
-create_environment() {
-    log_info "创建 conda 环境: $ENV_NAME"
-    
-    if conda env create -f "$ENV_FILE"; then
-        log_success "环境创建成功: $ENV_NAME"
-    else
-        log_error "环境创建失败"
-        exit 1
-    fi
-}
-
-# 更新环境
-update_environment() {
-    log_info "更新 conda 环境: $ENV_NAME"
-    
-    if conda env update -f "$ENV_FILE"; then
-        log_success "环境更新成功: $ENV_NAME"
-    else
-        log_error "环境更新失败"
-        exit 1
-    fi
-}
-
-# 删除环境
-remove_environment() {
-    log_info "删除现有环境: $ENV_NAME"
-    
-    if conda env remove -n "$ENV_NAME"; then
-        log_success "环境删除成功: $ENV_NAME"
-    else
-        log_warning "环境删除失败或不存在"
-    fi
-}
-
-# 验证环境
-validate_environment() {
-    log_info "验证环境: $ENV_NAME"
-    
-    # 激活环境并检查关键包
-    if conda run -n "$ENV_NAME" python -c "
-import sys
-print(f'Python version: {sys.version}')
-
-# 检查关键包
-try:
-    import pydantic
-    import jinja2
-    import yaml
-    import requests
-    print('✓ 所有关键包导入成功')
-except ImportError as e:
-    print(f'✗ 包导入失败: {e}')
-    sys.exit(1)
-"; then
-        log_success "环境验证通过"
-    else
-        log_error "环境验证失败"
-        exit 1
-    fi
-}
-
-# 显示环境信息
-show_environment_info() {
-    log_info "环境信息:"
-    echo "  名称: $ENV_NAME"
-    echo "  位置: $(conda info --envs | grep "^$ENV_NAME " | awk '{print $2}')"
-    echo "  Python 版本: $(conda run -n "$ENV_NAME" python --version)"
-    echo ""
-    log_info "激活环境:"
-    echo "  conda activate $ENV_NAME"
-    echo ""
-    log_info "验证安装:"
-    echo "  python -c \"import pydantic, jinja2, yaml; print('所有包正常')\""
-}
-
-# 主函数
-main() {
-    local recreate=false
-    local update=false
-    local check_only=false
-
-    # 解析命令行参数
-    while [[ $# -gt 0 ]]; do
-        case $1 in
-            -h|--help)
-                usage
-                exit 0
-                ;;
-            -r|--recreate)
-                recreate=true
-                shift
-                ;;
-            -u|--update)
-                update=true
-                shift
-                ;;
-            -c|--check)
-                check_only=true
-                shift
-                ;;
-            *)
-                log_error "未知选项: $1"
-                usage
-                exit 1
-                ;;
-        esac
-    done
-
-    # 检查依赖
-    check_conda
-    check_environment_file
-
-    # 仅检查模式
-    if [[ "$check_only" == "true" ]]; then
-        if environment_exists; then
-            log_success "环境 $ENV_NAME 存在"
-            validate_environment
-            show_environment_info
-        else
-            log_warning "环境 $ENV_NAME 不存在"
-            exit 1
-        fi
-        exit 0
-    fi
-
-    # 重新创建模式
-    if [[ "$recreate" == "true" ]]; then
-        if environment_exists; then
-            remove_environment
-        fi
-        create_environment
-        validate_environment
-        show_environment_info
-        exit 0
-    fi
-
-    # 更新模式
-    if [[ "$update" == "true" ]]; then
-        if environment_exists; then
-            update_environment
-            validate_environment
-            show_environment_info
-        else
-            log_error "环境 $ENV_NAME 不存在，无法更新"
-            log_info "使用 '$0' 创建环境"
-            exit 1
-        fi
-        exit 0
-    fi
-
-    # 默认模式：创建（如果不存在）
-    if environment_exists; then
-        log_warning "环境 $ENV_NAME 已存在"
-        log_info "使用 '$0 --update' 更新或 '$0 --recreate' 重新创建"
-        validate_environment
-        show_environment_info
-    else
-        create_environment
-        validate_environment
-        show_environment_info
-    fi
-}
-
-# 运行主函数
-main "$@"
\ No newline at end of file
diff --git a/setup-venv.sh b/setup-venv.sh
new file mode 100755
index 0000000..5e8656c
--- /dev/null
+++ b/setup-venv.sh
@@ -0,0 +1,202 @@
+#!/bin/bash
+
+# Ubuntu FAI Build System - Virtual Environment Setup Script
+# 创建和配置 Python 虚拟环境
+
+set -euo pipefail
+
+# 脚本配置
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+VENV_NAME="ubuntu-fai-venv"
+VENV_PATH="$SCRIPT_DIR/$VENV_NAME"
+REQUIREMENTS_FILE="$SCRIPT_DIR/requirements.txt"
+
+# 颜色输出函数
+log_info() {
+    echo -e "\033[0;34m[INFO]\033[0m $1"
+}
+
+log_success() {
+    echo -e "\033[0;32m[SUCCESS]\033[0m $1"
+}
+
+log_error() {
+    echo -e "\033[0;31m[ERROR]\033[0m $1"
+}
+
+log_warning() {
+    echo -e "\033[0;33m[WARNING]\033[0m $1"
+}
+
+# 检查系统要求
+check_system_requirements() {
+    log_info "检查系统要求..."
+    
+    # 检查 Python 3
+    if ! command -v python3 &> /dev/null; then
+        log_error "Python 3 未安装。请安装 Python 3.9 或更高版本。"
+        exit 1
+    fi
+    
+    # 检查 Python 版本
+    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
+    REQUIRED_VERSION="3.9"
+    
+    if ! python3 -c "import sys; exit(0 if sys.version_info >= (3, 9) else 1)"; then
+        log_error "Python 版本 $PYTHON_VERSION 不满足要求。需要 Python $REQUIRED_VERSION 或更高版本。"
+        exit 1
+    fi
+    
+    log_success "Python 版本检查通过: $(python3 --version)"
+    
+    # 检查 venv 模块
+    if ! python3 -c "import venv" 2>/dev/null; then
+        log_error "Python venv 模块未安装。请安装: sudo apt install python3-venv"
+        exit 1
+    fi
+    
+    # 检查 pip
+    if ! python3 -c "import pip" 2>/dev/null; then
+        log_error "pip 未安装。请安装: sudo apt install python3-pip"
+        exit 1
+    fi
+    
+    log_success "系统要求检查通过"
+}
+
+# 创建虚拟环境
+create_virtual_environment() {
+    log_info "创建 Python 虚拟环境: $VENV_NAME"
+    
+    # 如果虚拟环境已存在，询问是否重新创建
+    if [[ -d "$VENV_PATH" ]]; then
+        log_warning "虚拟环境已存在: $VENV_PATH"
+        read -p "是否删除并重新创建? (y/N): " -n 1 -r
+        echo
+        if [[ $REPLY =~ ^[Yy]$ ]]; then
+            log_info "删除现有虚拟环境..."
+            rm -rf "$VENV_PATH"
+        else
+            log_info "使用现有虚拟环境"
+            return 0
+        fi
+    fi
+    
+    # 创建虚拟环境
+    python3 -m venv "$VENV_PATH"
+    
+    if [[ ! -d "$VENV_PATH" ]]; then
+        log_error "虚拟环境创建失败"
+        exit 1
+    fi
+    
+    log_success "虚拟环境创建成功: $VENV_PATH"
+}
+
+# 激活虚拟环境并安装依赖
+install_dependencies() {
+    log_info "激活虚拟环境并安装依赖..."
+    
+    # 激活虚拟环境
+    source "$VENV_PATH/bin/activate"
+    
+    # 升级 pip
+    log_info "升级 pip..."
+    python -m pip install --upgrade pip
+    
+    # 检查 requirements.txt 文件
+    if [[ ! -f "$REQUIREMENTS_FILE" ]]; then
+        log_error "requirements.txt 文件不存在: $REQUIREMENTS_FILE"
+        exit 1
+    fi
+    
+    # 安装依赖
+    log_info "安装 Python 依赖包..."
+    pip install -r "$REQUIREMENTS_FILE"
+    
+    log_success "依赖安装完成"
+}
+
+# 验证安装
+verify_installation() {
+    log_info "验证安装..."
+    
+    # 激活虚拟环境
+    source "$VENV_PATH/bin/activate"
+    
+    # 检查关键包
+    local packages=("pydantic" "jinja2" "pyyaml" "requests" "pytest")
+    
+    for package in "${packages[@]}"; do
+        if python -c "import $package" 2>/dev/null; then
+            log_success "✓ $package"
+        else
+            log_error "✗ $package 安装失败"
+            exit 1
+        fi
+    done
+    
+    log_success "所有依赖包验证通过"
+}
+
+# 创建激活脚本
+create_activation_script() {
+    local activate_script="$SCRIPT_DIR/activate-venv.sh"
+    
+    log_info "创建激活脚本: $activate_script"
+    
+    cat > "$activate_script" << 'EOF'
+#!/bin/bash
+
+# Ubuntu FAI Build System - Virtual Environment Activation
+# 激活 Python 虚拟环境
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+VENV_PATH="$SCRIPT_DIR/ubuntu-fai-venv"
+
+if [[ ! -d "$VENV_PATH" ]]; then
+    echo -e "\033[0;31m[ERROR]\033[0m 虚拟环境不存在: $VENV_PATH"
+    echo -e "\033[0;34m[INFO]\033[0m 请先运行: ./setup-venv.sh"
+    exit 1
+fi
+
+# 激活虚拟环境
+source "$VENV_PATH/bin/activate"
+
+echo -e "\033[0;32m[SUCCESS]\033[0m 虚拟环境已激活: ubuntu-fai-venv"
+echo -e "\033[0;34m[INFO]\033[0m 使用 'deactivate' 命令退出虚拟环境"
+echo -e "\033[0;34m[INFO]\033[0m 运行构建: python build.py config.json.example"
+
+# 启动新的 shell 会话
+exec "$SHELL"
+EOF
+    
+    chmod +x "$activate_script"
+    log_success "激活脚本创建完成"
+}
+
+# 主函数
+main() {
+    log_info "Ubuntu FAI Build System - 虚拟环境设置"
+    log_info "========================================="
+    
+    check_system_requirements
+    create_virtual_environment
+    install_dependencies
+    verify_installation
+    create_activation_script
+    
+    log_success "虚拟环境设置完成!"
+    echo
+    log_info "使用方法:"
+    log_info "1. 激活虚拟环境: source ubuntu-fai-venv/bin/activate"
+    log_info "2. 或使用便捷脚本: ./activate-venv.sh"
+    log_info "3. 运行构建: python build.py config.json.example"
+    log_info "4. 退出虚拟环境: deactivate"
+}
+
+# 错误处理
+trap 'log_error "脚本执行失败"; exit 1' ERR
+
+# 运行主函数
+main "$@"
\ No newline at end of file
diff --git a/src/config/models.py b/src/config/models.py
index c5a302f..b7a278e 100644
--- a/src/config/models.py
+++ b/src/config/models.py
@@ -28,7 +28,7 @@ class HardwareConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     vendor: HardwareVendor = Field(
@@ -61,7 +61,7 @@ class EncryptionConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     enabled: bool = Field(
@@ -127,7 +127,7 @@ class PackageConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     apt_packages: List[str] = Field(
@@ -163,8 +163,18 @@ class PackageConfig(BaseModel):
                     raise ValueError(f"Invalid URL scheme: {url}")
                 if not parsed.netloc:
                     raise ValueError(f"Invalid URL format: {url}")
-                if not url.endswith('.deb'):
-                    raise ValueError(f"URL must point to .deb file: {url}")
+                # 允许重定向链接，不强制要求以 .deb 结尾
+                # 实际的 .deb 文件验证将在下载时进行
+                if url.endswith('.deb'):
+                    # 直接 .deb 链接，验证通过
+                    pass
+                elif any(domain in parsed.netloc for domain in ['code.visualstudio.com', 'dl.google.com', 'github.com']):
+                    # 已知的软件下载站点，允许重定向链接
+                    pass
+                else:
+                    # 其他链接，警告但不阻止
+                    import warnings
+                    warnings.warn(f"URL may not point to .deb file, will verify during download: {url}")
             except Exception as e:
                 raise ValueError(f"Invalid .deb URL {url}: {e}")
         return v
@@ -176,7 +186,7 @@ class UserConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     username: str = Field(
@@ -236,7 +246,7 @@ class FirstBootScript(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     url: str = Field(
@@ -282,7 +292,7 @@ class FirstBootConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     enabled: bool = Field(
@@ -307,7 +317,7 @@ class NetworkConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid"
+        extra="ignore"
     )
     
     dhcp: bool = Field(
@@ -329,7 +339,7 @@ class BuildConfig(BaseModel):
     model_config = ConfigDict(
         str_strip_whitespace=True,
         validate_assignment=True,
-        extra="forbid",
+        extra="ignore",
         validate_default=True
     )
     
diff --git a/src/generators/first_boot.py b/src/generators/first_boot.py
index f62db9f..3d36c84 100644
--- a/src/generators/first_boot.py
+++ b/src/generators/first_boot.py
@@ -3,6 +3,7 @@
 import logging
 from pathlib import Path
 from typing import Dict, Any, List
+from urllib.parse import urlparse
 
 from jinja2 import Environment, FileSystemLoader, Template
 
@@ -122,8 +123,16 @@ class FirstBootGenerator:
         scripts_dir = output_dir / "scripts"
         scripts_dir.mkdir(exist_ok=True)
         
-        for script_config in config.first_boot.scripts:
-            script_file = scripts_dir / f"{script_config.name}.sh"
+        for i, script_config in enumerate(config.first_boot.scripts):
+            # Generate script name from URL or use index
+            if script_config.url:
+                url_path = urlparse(script_config.url).path
+                filename = Path(url_path).name or f"script_{i}.sh"
+                script_name = filename.replace('.sh', '')
+            else:
+                script_name = f"script_{i}"
+            
+            script_file = scripts_dir / f"{script_name}.sh"
             
             # If script has content, write it directly
             if hasattr(script_config, 'content') and script_config.content:
