#cloud-config
# Ubuntu Autoinstall Configuration
# Generated by Ubuntu FAI Build System

autoinstall:
  version: 1
  
  # Locale and keyboard configuration
  locale: en_US.UTF-8
  keyboard:
    layout: us
    variant: ""
  
  # Network configuration
  network:
    version: 2
    ethernets:
      eth0:
        dhcp4: {{ config.network.dhcp | lower }}
        dhcp6: {{ config.network.dhcp | lower }}
  
  # Storage configuration
  storage:
    layout:
{% if config.encryption.enabled -%}
      name: lvm
      sizing-policy: scaled
      password: "{{ config.encryption.passphrase }}"
{% else -%}
      name: direct
{% endif -%}
      match:
{% if config.hardware.target_ssd -%}
        ssd: true
{% endif -%}
{% if config.hardware.disk_size_min_gb -%}
        size: ">={{ config.hardware.disk_size_min_gb }}G"
{% else -%}
        size: largest
{% endif %}
  
  # Identity and user configuration
  identity:
    hostname: "{{ config.network.hostname }}"
    username: "{{ config.user.username }}"
    {% if config.user.password -%}
    password: "{{ config.user.password }}"
    {% endif -%}
    realname: "{{ config.user.full_name }}"
  
  # SSH configuration
  ssh:
    install-server: true
    {% if config.user.ssh_authorized_keys -%}
    authorized-keys:
      {% for key in config.user.ssh_authorized_keys -%}
      - "{{ key }}"
      {% endfor %}
    {% endif -%}
    allow-pw: {% if config.user.password %}true{% else %}false{% endif %}
  
  # Package configuration
  packages:
    # Essential desktop packages
    - ubuntu-desktop
    - ubuntu-desktop-minimal
    - gdm3
    - firefox
    - libreoffice
    - snapd
    
    # System utilities
    - curl
    - wget
    - git
    - vim
    - nano
    - htop
    - tree
    - unzip
    - software-properties-common
    - apt-transport-https
    - ca-certificates
    - gnupg
    - lsb-release
    
    # Hardware-specific packages
    {% if config.hardware.vendor == "dell" -%}
    - dell-recovery
    - dell-super-io-check
    {% elif config.hardware.vendor == "lenovo" -%}
    - thinkfan
    - tp-smapi-dkms
    {% elif config.hardware.vendor == "hp" -%}
    - hplip
    - hplip-gui
    {% endif -%}
    
    # Custom APT packages from configuration
    {% for package in config.packages.apt_packages -%}
    - {{ package }}
    {% endfor %}
  
  # Snap packages
  {% if config.packages.snap_packages -%}
  snaps:
    {% for snap in config.packages.snap_packages -%}
    - name: {{ snap }}
      channel: stable
    {% endfor %}
  {% endif %}
  
  # APT configuration
  apt:
    preserve_sources_list: false
    primary:
      - arches: [amd64]
        uri: http://archive.ubuntu.com/ubuntu
    security:
      - arches: [amd64]
        uri: http://security.ubuntu.com/ubuntu
    sources:
      # Additional repositories can be added here
      google-chrome:
        source: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
        key: |
          -----BEGIN PGP PUBLIC KEY BLOCK-----
          
          mQENBFcMK00BCADL79BwFJCh0dWJDQOo3vHnM9Zl+Gx0l0aMuJBxgQMXXXwXXXXX
          -----END PGP PUBLIC KEY BLOCK-----
  
  # User data - post-installation configuration
  user-data:
    # Disable automatic updates during installation
    package_update: false
    package_upgrade: false
    
    # Timezone configuration
    timezone: {{ timezone|default('UTC') }}
    
    # Additional user configuration
    users:
      - name: {{ config.user.username }}
        gecos: "{{ config.user.full_name }}"
        {% if config.user.password -%}
        passwd: "{{ config.user.password }}"
        {% endif -%}
        shell: /bin/bash
        groups:
          - adm
          - dialout
          - cdrom
          - floppy
          - sudo
          - audio
          - dip
          - video
          - plugdev
          - netdev
          - lxd
          {% if config.packages.apt_packages and 'docker.io' in config.packages.apt_packages -%}
          - docker
          {% endif %}
        {% if config.user.ssh_authorized_keys -%}
        ssh_authorized_keys:
          {% for key in config.user.ssh_authorized_keys -%}
          - "{{ key }}"
          {% endfor %}
        {% endif -%}
        sudo: {% if config.user.sudo_nopasswd %}ALL=(ALL) NOPASSWD:ALL{% else %}ALL=(ALL:ALL) ALL{% endif %}
    
    # System configuration
    write_files:
      # Create first-boot service if enabled
      {% if config.first_boot.enabled and config.first_boot.scripts -%}
      - path: /etc/systemd/system/fai-first-boot.service
        content: |
          [Unit]
          Description=FAI First Boot Script Execution
          After=network-online.target
          Wants=network-online.target
          ConditionPathExists=!/var/lib/fai-first-boot/.completed
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/fai-first-boot.sh
          RemainAfterExit=yes
          StandardOutput=journal
          StandardError=journal
          TimeoutStartSec={{ config.first_boot.timeout_seconds }}
          
          [Install]
          WantedBy=multi-user.target
        permissions: '0644'
      
      - path: /usr/local/bin/fai-first-boot.sh
        content: |
          #!/bin/bash
          # FAI First Boot Script Execution
          set -euo pipefail
          
          SCRIPT_DIR="/usr/local/share/fai-first-boot"
          LOG_FILE="/var/log/fai-first-boot.log"
          COMPLETION_FLAG="/var/lib/fai-first-boot/.completed"
          
          # Create necessary directories
          mkdir -p "$(dirname "$LOG_FILE")" "$(dirname "$COMPLETION_FLAG")" "$SCRIPT_DIR"
          
          # Logging function
          log() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
          }
          
          log "Starting FAI first boot script execution"
          
          # Download and execute scripts
          {% for script in config.first_boot.scripts -%}
          {% if script.type == "automated" -%}
          log "Downloading and executing automated script: {{ script.url }}"
          if wget -O "$SCRIPT_DIR/{{ loop.index }}.sh" "{{ script.url }}"; then
              {% if script.checksum -%}
              if echo "{{ script.checksum }}  $SCRIPT_DIR/{{ loop.index }}.sh" | sha256sum -c; then
                  log "Checksum verification passed for script {{ loop.index }}"
              else
                  log "ERROR: Checksum verification failed for script {{ loop.index }}"
                  continue
              fi
              {% endif -%}
              chmod +x "$SCRIPT_DIR/{{ loop.index }}.sh"
              if "$SCRIPT_DIR/{{ loop.index }}.sh" 2>&1 | tee -a "$LOG_FILE"; then
                  log "Successfully executed script {{ loop.index }}"
              else
                  log "ERROR: Script {{ loop.index }} execution failed"
              fi
          else
              log "ERROR: Failed to download script from {{ script.url }}"
          fi
          {% endif -%}
          {% endfor %}
          
          # Mark completion
          touch "$COMPLETION_FLAG"
          log "FAI first boot script execution completed"
          
          # Disable the service
          systemctl disable fai-first-boot.service
        permissions: '0755'
      {% endif -%}
      
      # Additional system configuration files
      - path: /etc/fai-build-info.json
        content: |
          {
            "build_system": "Ubuntu FAI Build System",
            "build_date": "{{ build_timestamp }}",
            "ubuntu_version": "24.04",
            "hardware_vendor": "{{ config.hardware.vendor }}",
            "encryption_enabled": {{ config.encryption.enabled | lower }},
            "fai_classes": {{ config.get_fai_classes() | tojson }}
          }
        permissions: '0644'
  
  # Late commands - executed at the end of installation
  late-commands:
    # Update package database
    - curtin in-target -- apt-get update
    
    # Install downloaded .deb packages
    {% for deb_url in config.packages.deb_urls -%}
    - curtin in-target -- wget -O /tmp/package{{ loop.index }}.deb "{{ deb_url }}"
    - curtin in-target -- dpkg -i /tmp/package{{ loop.index }}.deb || apt-get install -f -y
    {% endfor %}
    
    # Enable first-boot service if configured
    {% if config.first_boot.enabled and config.first_boot.scripts -%}
    - curtin in-target -- systemctl enable fai-first-boot.service
    {% endif -%}
    
    # Hardware-specific late commands
    {% if config.hardware.vendor == "dell" -%}
    - curtin in-target -- modprobe dell_laptop || true
    {% elif config.hardware.vendor == "lenovo" -%}
    - curtin in-target -- modprobe thinkpad_acpi || true
    {% elif config.hardware.vendor == "hp" -%}
    - curtin in-target -- systemctl enable hplip.service || true
    {% endif -%}
    
    # Final system cleanup
    - curtin in-target -- apt-get autoremove -y
    - curtin in-target -- apt-get autoclean
    
    # Set up encrypted swap if encryption is enabled
    {% if config.encryption.enabled -%}
    - curtin in-target -- echo "swap /dev/mapper/swap /dev/urandom swap,cipher={{ config.encryption.cipher }}" >> /etc/crypttab
    {% endif %}
  
  # Error handling
  error-commands:
    - echo "Installation failed - check logs for details" > /tmp/install-error.log
    - journalctl -u subiquity > /tmp/subiquity.log
  
  # Reporting configuration
  reporting:
    builtin:
      type: print
  
  # Power off after installation
  shutdown: poweroff