#!/bin/bash
# First-boot script for Ubuntu FAI custom installation
# Auto-generated from configuration

set -euo pipefail

# Logging setup
LOGFILE="/var/log/first-boot.log"
exec 1> >(tee -a "$LOGFILE")
exec 2>&1

echo "==============================================="
echo "Ubuntu FAI First Boot Script Starting"
echo "Date: $(date)"
echo "==============================================="

# Color output functions
log_info() {
    echo -e "\033[32m[INFO]\033[0m $1"
}

log_warning() {
    echo -e "\033[33m[WARNING]\033[0m $1"
}

log_error() {
    echo -e "\033[31m[ERROR]\033[0m $1"
}

# Error handling
handle_error() {
    log_error "Script failed at line $1"
    exit 1
}
trap 'handle_error $LINENO' ERR

# Wait for system to be ready
log_info "Waiting for system to be ready..."
sleep 30

# Update package lists
log_info "Updating package lists..."
apt-get update

{% if first_boot.install_packages %}
# Install additional packages
log_info "Installing additional packages..."
{% for package in packages.apt_packages %}
apt-get install -y {{ package.name }}
{% endfor %}
{% endif %}

{% if first_boot.enable_services %}
# Enable and start services
log_info "Configuring services..."
{% for service in first_boot.services %}
systemctl enable {{ service.name }}
{% if service.start_now %}
systemctl start {{ service.name }}
{% endif %}
{% endfor %}
{% endif %}

{% if user.create_user %}
# Configure user settings
log_info "Configuring user: {{ user.username }}"

# Add user to additional groups
{% for group in user.groups %}
usermod -aG {{ group }} {{ user.username }}
{% endfor %}

# Set up user directories
sudo -u {{ user.username }} mkdir -p /home/{{ user.username }}/.config
sudo -u {{ user.username }} mkdir -p /home/{{ user.username }}/Desktop
sudo -u {{ user.username }} mkdir -p /home/{{ user.username }}/Documents
sudo -u {{ user.username }} mkdir -p /home/{{ user.username }}/Downloads

{% if user.auto_login %}
# Configure auto-login
mkdir -p /etc/gdm3
cat > /etc/gdm3/custom.conf << 'EOF'
[daemon]
AutomaticLoginEnable=True
AutomaticLogin={{ user.username }}
EOF
{% endif %}
{% endif %}

{% if hardware.vendor %}
# Hardware-specific configurations
log_info "Applying hardware-specific configurations for {{ hardware.vendor }}"

case "{{ hardware.vendor | lower }}" in
    "dell")
        log_info "Applying Dell-specific optimizations..."
        # Dell Command Configure if available
        if command -v cctk &> /dev/null; then
            cctk --ThermalManagement=Optimized || true
        fi
        ;;
    "lenovo")
        log_info "Applying Lenovo-specific optimizations..."
        # Lenovo-specific power management
        echo 'SUBSYSTEM=="power_supply", ATTR{online}=="0", RUN+="/usr/bin/x86_energy_perf_policy performance"' > /etc/udev/rules.d/50-lenovo-power.rules
        ;;
    "hp")
        log_info "Applying HP-specific optimizations..."
        # HP-specific configurations
        modprobe hp_wmi || true
        ;;
esac
{% endif %}

{% if network.configure_wifi %}
# Network configuration
log_info "Configuring network settings..."

{% if network.wifi_ssid %}
# Configure WiFi
cat > /etc/netplan/50-wifi.yaml << 'EOF'
network:
  version: 2
  wifis:
    wlan0:
      dhcp4: true
      access-points:
        "{{ network.wifi_ssid }}":
          password: "{{ network.wifi_password }}"
EOF
netplan apply
{% endif %}
{% endif %}

# Run custom scripts
{% if first_boot.scripts %}
log_info "Running custom first-boot scripts..."
{% for script in first_boot.scripts %}
{% if script.enabled %}
log_info "Running script: {{ script.name }}"
if [ -f "/opt/first-boot/scripts/{{ script.name }}.sh" ]; then
    chmod +x "/opt/first-boot/scripts/{{ script.name }}.sh"
    "/opt/first-boot/scripts/{{ script.name }}.sh" || log_warning "Script {{ script.name }} failed"
else
    log_warning "Script file not found: {{ script.name }}.sh"
fi
{% endif %}
{% endfor %}
{% endif %}

# System cleanup and optimization
log_info "Performing system cleanup..."

# Clean package cache
apt-get autoremove -y
apt-get autoclean

# Update locate database
updatedb || true

# Generate SSH host keys if missing
ssh-keygen -A || true

# Set proper permissions
chmod 600 /etc/ssh/ssh_host_*_key
chmod 644 /etc/ssh/ssh_host_*_key.pub

{% if encryption.enabled %}
# LUKS/encryption specific configurations
log_info "Configuring encryption settings..."

# Update initramfs to include encryption modules
update-initramfs -u

# Configure crypttab if needed
if [ -f /etc/crypttab ]; then
    log_info "Crypttab configuration found"
fi
{% endif %}

# Final system configuration
log_info "Applying final system configurations..."

# Set timezone
{% if config.timezone %}
timedatectl set-timezone {{ config.timezone }}
{% endif %}

# Disable first-boot service (this script)
systemctl disable first-boot.service

# Create completion marker
touch /var/lib/first-boot-completed
echo "$(date): First boot configuration completed" > /var/lib/first-boot-completed

echo "==============================================="
echo "Ubuntu FAI First Boot Script Completed"
echo "Date: $(date)"
echo "==============================================="

log_info "First-boot configuration completed successfully!"
log_info "System will reboot in 10 seconds..."

# Schedule reboot
sleep 10
reboot